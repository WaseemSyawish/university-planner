"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/attendance";
exports.ids = ["pages/api/attendance"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fattendance&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cattendance.js&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fattendance&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cattendance.js&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_attendance_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\attendance.js */ \"(api-node)/./pages/api/attendance.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_attendance_js__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_attendance_js__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/attendance\",\n        pathname: \"/api/attendance\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_attendance_js__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/attendance\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/attendance\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fattendance&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cattendance.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/attendance.js":
/*!*********************************!*\
  !*** ./pages/api/attendance.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// Consolidated attendance API handler below.\n// Removed an earlier simplistic file-based handler to avoid duplicate default exports.\n\nlet prisma;\nlet prismaUsable = true;\nfunction initPrisma() {\n    if (prisma) return prisma;\n    try {\n        prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n        return prisma;\n    } catch (err) {\n        console.error('Prisma init error:', err);\n        prismaUsable = false;\n        return null;\n    }\n}\nfunction getPrisma() {\n    if (!prismaUsable) return null;\n    return prisma || initPrisma();\n}\nlet attendanceFallback;\nlet coursesFallback;\nasync function getAttendanceFallback() {\n    if (attendanceFallback) return attendanceFallback;\n    const mod = await __webpack_require__.e(/*! import() */ \"_api-node_lib_attendanceFallback_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../../lib/attendanceFallback.js */ \"(api-node)/./lib/attendanceFallback.js\", 23));\n    attendanceFallback = mod.default || mod;\n    return attendanceFallback;\n}\nasync function getCoursesFallback() {\n    if (coursesFallback) return coursesFallback;\n    const mod = await __webpack_require__.e(/*! import() */ \"_api-node_lib_coursesFallback_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../../lib/coursesFallback.js */ \"(api-node)/./lib/coursesFallback.js\", 23));\n    coursesFallback = mod.default || mod;\n    return coursesFallback;\n}\nfunction isPrismaEngineError(err) {\n    if (!err) return false;\n    const msg = err.message || '';\n    return msg.includes('Query Engine') || msg.includes('could not locate the Query Engine') || err.name === 'PrismaClientInitializationError';\n}\nasync function handler(req, res) {\n    const { method } = req;\n    try {\n        switch(method){\n            case 'GET':\n                return await handleGet(req, res);\n            case 'POST':\n                return await handlePost(req, res);\n            case 'PUT':\n                return await handlePut(req, res);\n            case 'DELETE':\n                return await handleDelete(req, res);\n            default:\n                res.setHeader('Allow', [\n                    'GET',\n                    'POST',\n                    'PUT',\n                    'DELETE'\n                ]);\n                return res.status(405).json({\n                    success: false,\n                    error: `Method ${method} not allowed`\n                });\n        }\n    } catch (error) {\n        console.error('API Error:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Internal server error',\n            details:  true ? error.message : 0\n        });\n    } finally{\n    // Intentionally do NOT disconnect the global Prisma client here. Disconnecting\n    // per-request causes connection churn and slower responses. The client is\n    // managed globally and should be disconnected only on process shutdown.\n    }\n}\n// GET /api/attendance - Fetch attendance sessions for a course\nasync function handleGet(req, res) {\n    const { courseId } = req.query;\n    if (!courseId) {\n        return res.status(400).json({\n            success: false,\n            error: 'courseId parameter is required'\n        });\n    }\n    // Resolve user from next-auth token only (required)\n    let effectiveUserId = null;\n    try {\n        const { getToken } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! next-auth/jwt */ \"next-auth/jwt\", 23));\n        const token = await getToken({\n            req,\n            secret: process.env.NEXTAUTH_SECRET || 'dev-nextauth-secret'\n        });\n        effectiveUserId = token && token.userId ? token.userId : null;\n    } catch (e) {\n        console.warn('Failed to resolve token in attendance GET', e);\n    }\n    if (!effectiveUserId) {\n        return res.status(401).json({\n            success: false,\n            error: 'Not authenticated'\n        });\n    }\n    try {\n        // Verify the course belongs to the user (or resolve fallback)\n        const p = getPrisma();\n        let course;\n        if (!p) {\n            const fb = await getCoursesFallback();\n            course = fb.find(courseId);\n        } else {\n            try {\n                course = await p.course.findFirst({\n                    where: {\n                        id: courseId,\n                        user_id: effectiveUserId\n                    }\n                });\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during course find; using fallback');\n                    const fb = await getCoursesFallback();\n                    course = fb.find(courseId);\n                } else throw err;\n            }\n        }\n        if (!course) {\n            return res.status(404).json({\n                success: false,\n                error: 'Course not found or you do not have permission to access it'\n            });\n        }\n        // Fetch attendance sessions for the course (oldest first)\n        const p2 = getPrisma();\n        let sessions = [];\n        if (!p2) {\n            const fb = await getAttendanceFallback();\n            sessions = fb.list({\n                courseId,\n                userId: effectiveUserId\n            });\n        } else {\n            try {\n                sessions = await p2.attendanceSession.findMany({\n                    where: {\n                        course_id: courseId,\n                        user_id: effectiveUserId\n                    },\n                    orderBy: {\n                        date: 'asc'\n                    },\n                    include: {\n                        courses: {\n                            select: {\n                                name: true,\n                                code: true,\n                                color: true\n                            }\n                        }\n                    }\n                });\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during attendance findMany; using fallback');\n                    const fb = await getAttendanceFallback();\n                    sessions = fb.list({\n                        courseId,\n                        userId: effectiveUserId\n                    });\n                } else throw err;\n            }\n        }\n        const formattedSessions = sessions.map((session)=>({\n                id: session.id,\n                date: typeof session.date === 'string' ? session.date.split('T')[0] : session.date.toISOString().split('T')[0],\n                status: session.status,\n                points: session.points || 0,\n                notes: session.notes || '',\n                course: {\n                    name: session.courses ? session.courses.name : course.name,\n                    code: session.courses ? session.courses.code : course.code,\n                    color: session.courses ? session.courses.color : course.color\n                },\n                createdAt: session.created_at,\n                updatedAt: session.updated_at\n            }));\n        return res.status(200).json({\n            success: true,\n            sessions: formattedSessions,\n            total: formattedSessions.length,\n            course: {\n                id: course.id,\n                name: course.name,\n                code: course.code,\n                color: course.color\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching attendance sessions:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Failed to fetch attendance sessions',\n            details:  true ? error.message : 0\n        });\n    }\n}\n// POST /api/attendance - Create a new attendance session\nasync function handlePost(req, res) {\n    const { date, status, points, courseId, notes } = req.body;\n    // Resolve user id from token (required)\n    let effectiveUserId = null;\n    try {\n        const { getToken } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! next-auth/jwt */ \"next-auth/jwt\", 23));\n        const token = await getToken({\n            req,\n            secret: process.env.NEXTAUTH_SECRET || 'dev-nextauth-secret'\n        });\n        effectiveUserId = token && token.userId ? token.userId : null;\n    } catch (e) {\n        console.warn('Failed to resolve token in attendance POST', e);\n    }\n    if (!effectiveUserId) {\n        return res.status(401).json({\n            success: false,\n            error: 'Not authenticated'\n        });\n    }\n    if (!date || !status || !courseId) {\n        return res.status(400).json({\n            success: false,\n            error: 'Missing required fields: date, status, courseId'\n        });\n    }\n    if (!isValidStatus(status)) {\n        return res.status(400).json({\n            success: false,\n            error: 'Invalid status. Must be one of: PRESENT, ABSENT, LATE, HOLIDAY, EXCUSED'\n        });\n    }\n    try {\n        // Verify the course belongs to the user\n        const p = getPrisma();\n        let course;\n        if (!p) {\n            const fb = await getCoursesFallback();\n            course = fb.find(courseId);\n            if (course) {\n                if (!effectiveUserId || course.user_id !== effectiveUserId) effectiveUserId = course.user_id;\n            }\n        } else {\n            try {\n                course = await p.course.findFirst({\n                    where: {\n                        id: courseId,\n                        user_id: effectiveUserId\n                    }\n                });\n                if (!course) {\n                    // Do not fallback to other owners — enforce strict ownership\n                    return res.status(403).json({\n                        success: false,\n                        error: 'Not authorized to add attendance for this course'\n                    });\n                }\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during course find (POST); using fallback');\n                    const fb = await getCoursesFallback();\n                    course = fb.find(courseId);\n                    if (course) {\n                        if (!effectiveUserId || course.user_id !== effectiveUserId) effectiveUserId = course.user_id;\n                    }\n                } else throw err;\n            }\n        }\n        if (!course) {\n            return res.status(404).json({\n                success: false,\n                error: 'Course not found or you do not have permission to access it'\n            });\n        }\n        const sessionDate = new Date(date);\n        if (isNaN(sessionDate.getTime())) {\n            return res.status(400).json({\n                success: false,\n                error: 'Invalid date format'\n            });\n        }\n        // Check for duplicate session on the same date\n        // Check for duplicate session on the same date\n        const p2 = getPrisma();\n        let existingSession;\n        if (!p2) {\n            const fb = await getAttendanceFallback();\n            existingSession = fb.list({\n                courseId,\n                userId: effectiveUserId\n            }).find((s)=>s.date.split('T')[0] === sessionDate.toISOString().split('T')[0]);\n        } else {\n            try {\n                existingSession = await p2.attendanceSession.findFirst({\n                    where: {\n                        date: sessionDate,\n                        course_id: courseId,\n                        user_id: effectiveUserId\n                    }\n                });\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during duplicate check; using fallback');\n                    const fb = await getAttendanceFallback();\n                    existingSession = fb.list({\n                        courseId,\n                        userId: effectiveUserId\n                    }).find((s)=>s.date.split('T')[0] === sessionDate.toISOString().split('T')[0]);\n                } else throw err;\n            }\n        }\n        if (existingSession) return res.status(400).json({\n            success: false,\n            error: 'An attendance session already exists for this date and course'\n        });\n        // Calculate points based on status if not provided\n        const sessionPoints = points !== undefined ? parseInt(points) || 0 : getDefaultPoints(status);\n        // Create the attendance session\n        // Create the attendance session (Prisma or fallback)\n        const p3 = getPrisma();\n        let newSession;\n        if (!p3) {\n            const fb = await getAttendanceFallback();\n            newSession = fb.create({\n                date: sessionDate.toISOString(),\n                status,\n                points: sessionPoints,\n                notes,\n                userId: effectiveUserId,\n                courseId\n            });\n        } else {\n            try {\n                newSession = await p3.attendanceSession.create({\n                    data: {\n                        date: sessionDate,\n                        status: status.toUpperCase(),\n                        points: sessionPoints,\n                        notes: notes?.trim() || null,\n                        user_id: effectiveUserId,\n                        course_id: courseId\n                    },\n                    include: {\n                        courses: {\n                            select: {\n                                name: true,\n                                code: true,\n                                color: true\n                            }\n                        }\n                    }\n                });\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during attendance.create; using fallback');\n                    const fb = await getAttendanceFallback();\n                    newSession = fb.create({\n                        date: sessionDate.toISOString(),\n                        status,\n                        points: sessionPoints,\n                        notes,\n                        userId: effectiveUserId,\n                        courseId\n                    });\n                } else throw err;\n            }\n        }\n        const formattedSession = {\n            id: newSession.id,\n            date: typeof newSession.date === 'string' ? newSession.date.split('T')[0] : newSession.date.toISOString().split('T')[0],\n            status: newSession.status,\n            points: newSession.points || 0,\n            notes: newSession.notes || '',\n            course: {\n                name: newSession.courses ? newSession.courses.name : course.name,\n                code: newSession.courses ? newSession.courses.code : course.code,\n                color: newSession.courses ? newSession.courses.color : course.color\n            },\n            createdAt: newSession.created_at,\n            updatedAt: newSession.updated_at\n        };\n        return res.status(201).json({\n            success: true,\n            session: formattedSession,\n            message: 'Attendance session created successfully'\n        });\n    } catch (error) {\n        console.error('Error creating attendance session:', error);\n        if (error.code === 'P2002') {\n            return res.status(400).json({\n                success: false,\n                error: 'An attendance session already exists for this date and course'\n            });\n        }\n        return res.status(500).json({\n            success: false,\n            error: 'Failed to create attendance session',\n            details:  true ? error.message : 0\n        });\n    }\n}\n// PUT /api/attendance - Update an existing attendance session\n// Identity is resolved from next-auth token only; client must not supply userId\nasync function handlePut(req, res) {\n    const { id, date, status, points, notes } = req.body;\n    if (!id) {\n        return res.status(400).json({\n            success: false,\n            error: 'Session ID is required'\n        });\n    }\n    try {\n        // Resolve auth token to identify user and verify the session belongs to them\n        let tokenUserId = null;\n        try {\n            const { getToken } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! next-auth/jwt */ \"next-auth/jwt\", 23));\n            const token = await getToken({\n                req,\n                secret: process.env.NEXTAUTH_SECRET || 'dev-nextauth-secret'\n            });\n            tokenUserId = token && token.userId ? token.userId : null;\n        } catch (e) {\n            console.warn('Failed to resolve token in attendance PUT', e);\n        }\n        if (!tokenUserId) return res.status(401).json({\n            success: false,\n            error: 'Not authenticated'\n        });\n        const p4 = getPrisma();\n        let existingSession;\n        if (!p4) {\n            const fb = await getAttendanceFallback();\n            existingSession = fb.find(id);\n            if (existingSession && existingSession.user_id !== tokenUserId) existingSession = null;\n            if (existingSession && !existingSession.courses) existingSession.courses = {\n                name: existingSession.course || null\n            };\n        } else {\n            try {\n                existingSession = await p4.attendanceSession.findFirst({\n                    where: {\n                        id: id,\n                        user_id: tokenUserId\n                    },\n                    include: {\n                        courses: true\n                    }\n                });\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during session find (PUT); using fallback');\n                    const fb = await getAttendanceFallback();\n                    existingSession = fb.find(id);\n                    if (existingSession && existingSession.user_id !== tokenUserId) existingSession = null;\n                    if (existingSession && !existingSession.courses) existingSession.courses = {\n                        name: existingSession.course || null\n                    };\n                } else throw err;\n            }\n        }\n        // Validate status if provided\n        if (status && !isValidStatus(status)) {\n            return res.status(400).json({\n                success: false,\n                error: 'Invalid status. Must be one of: PRESENT, ABSENT, LATE, HOLIDAY, EXCUSED'\n            });\n        }\n        // Prepare update data\n        const updateData = {};\n        if (date) {\n            const sessionDate = new Date(date);\n            if (isNaN(sessionDate.getTime())) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'Invalid date format'\n                });\n            }\n            // Check for duplicate date (excluding current session)\n            const p5 = getPrisma();\n            let duplicateSession;\n            if (!p5) {\n                const fb = await getAttendanceFallback();\n                duplicateSession = fb.list({\n                    courseId: existingSession.course_id,\n                    userId: tokenUserId\n                }).find((s)=>s.date.split('T')[0] === sessionDate.toISOString().split('T')[0] && s.id !== id);\n            } else {\n                try {\n                    duplicateSession = await p5.attendanceSession.findFirst({\n                        where: {\n                            date: sessionDate,\n                            course_id: existingSession.course_id,\n                            user_id: tokenUserId,\n                            id: {\n                                not: id\n                            }\n                        }\n                    });\n                } catch (err) {\n                    if (isPrismaEngineError(err)) {\n                        console.warn('Prisma engine not available during duplicate check (PUT); using fallback');\n                        const fb = await getAttendanceFallback();\n                        duplicateSession = fb.list({\n                            courseId: existingSession.course_id,\n                            userId: tokenUserId\n                        }).find((s)=>s.date.split('T')[0] === sessionDate.toISOString().split('T')[0] && s.id !== id);\n                    } else throw err;\n                }\n            }\n            if (duplicateSession) return res.status(400).json({\n                success: false,\n                error: 'Another attendance session already exists for this date and course'\n            });\n            updateData.date = sessionDate;\n        }\n        if (status) {\n            updateData.status = status.toUpperCase();\n            // Auto-update points based on new status if points not explicitly provided\n            if (points === undefined) {\n                updateData.points = getDefaultPoints(status);\n            }\n        }\n        if (points !== undefined) {\n            updateData.points = parseInt(points) || 0;\n        }\n        if (notes !== undefined) {\n            updateData.notes = notes?.trim() || null;\n        }\n        updateData.updated_at = new Date();\n        // Update the session (Prisma or fallback)\n        const p6 = getPrisma();\n        let updatedSession;\n        if (!p6) {\n            const fb = await getAttendanceFallback();\n            updatedSession = fb.update(id, updateData);\n            if (updatedSession && !updatedSession.courses) updatedSession.courses = {\n                name: updatedSession.course || null\n            };\n        } else {\n            try {\n                updatedSession = await p6.attendanceSession.update({\n                    where: {\n                        id\n                    },\n                    data: updateData,\n                    include: {\n                        courses: {\n                            select: {\n                                name: true,\n                                code: true,\n                                color: true\n                            }\n                        }\n                    }\n                });\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during attendance.update; using fallback');\n                    const fb = await getAttendanceFallback();\n                    updatedSession = fb.update(id, updateData);\n                    if (updatedSession && !updatedSession.courses) updatedSession.courses = {\n                        name: updatedSession.course || null\n                    };\n                } else throw err;\n            }\n        }\n        const formattedSession = {\n            id: updatedSession.id,\n            date: updatedSession.date.toISOString().split('T')[0],\n            status: updatedSession.status,\n            points: updatedSession.points || 0,\n            notes: updatedSession.notes || '',\n            course: {\n                name: updatedSession.courses.name,\n                code: updatedSession.courses.code,\n                color: updatedSession.courses.color\n            },\n            createdAt: updatedSession.created_at,\n            updatedAt: updatedSession.updated_at\n        };\n        return res.status(200).json({\n            success: true,\n            session: formattedSession,\n            message: 'Attendance session updated successfully'\n        });\n    } catch (error) {\n        console.error('Error updating attendance session:', error);\n        if (error.code === 'P2002') {\n            return res.status(400).json({\n                success: false,\n                error: 'Another attendance session already exists for this date and course'\n            });\n        }\n        return res.status(500).json({\n            success: false,\n            error: 'Failed to update attendance session',\n            details:  true ? error.message : 0\n        });\n    }\n}\n// DELETE /api/attendance - Delete an attendance session\nasync function handleDelete(req, res) {\n    const { id } = req.body;\n    if (!id) {\n        return res.status(400).json({\n            success: false,\n            error: 'Session ID is required'\n        });\n    }\n    // Resolve user id from token (required)\n    let tokenUserId = null;\n    try {\n        const { getToken } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! next-auth/jwt */ \"next-auth/jwt\", 23));\n        const token = await getToken({\n            req,\n            secret: process.env.NEXTAUTH_SECRET || 'dev-nextauth-secret'\n        });\n        tokenUserId = token && token.userId ? token.userId : null;\n    } catch (e) {\n        console.warn('Failed to resolve token in attendance DELETE', e);\n    }\n    if (!tokenUserId) return res.status(401).json({\n        success: false,\n        error: 'Not authenticated'\n    });\n    try {\n        // Verify the session belongs to the user and delete (Prisma or fallback)\n        const p7 = getPrisma();\n        let existingDelSession;\n        if (!p7) {\n            const fb = await getAttendanceFallback();\n            existingDelSession = fb.find(id);\n            if (existingDelSession && existingDelSession.user_id !== tokenUserId) existingDelSession = null;\n            if (!existingDelSession) return res.status(404).json({\n                success: false,\n                error: 'Attendance session not found or you do not have permission to delete it'\n            });\n            fb.delete(id);\n            return res.status(200).json({\n                success: true,\n                message: `Attendance session for ${existingDelSession.course || existingDelSession.course_id} deleted successfully`,\n                deletedSession: {\n                    id: existingDelSession.id,\n                    date: existingDelSession.date.split('T')[0],\n                    course: existingDelSession.course || existingDelSession.course_id\n                }\n            });\n        } else {\n            try {\n                existingDelSession = await p7.attendanceSession.findFirst({\n                    where: {\n                        id: id,\n                        user_id: tokenUserId\n                    },\n                    include: {\n                        courses: {\n                            select: {\n                                name: true\n                            }\n                        }\n                    }\n                });\n                if (!existingDelSession) return res.status(404).json({\n                    success: false,\n                    error: 'Attendance session not found or you do not have permission to delete it'\n                });\n                await p7.attendanceSession.delete({\n                    where: {\n                        id\n                    }\n                });\n                return res.status(200).json({\n                    success: true,\n                    message: `Attendance session for ${existingDelSession.courses.name} deleted successfully`,\n                    deletedSession: {\n                        id: existingDelSession.id,\n                        date: existingDelSession.date.toISOString().split('T')[0],\n                        course: existingDelSession.courses.name\n                    }\n                });\n            } catch (err) {\n                if (isPrismaEngineError(err)) {\n                    console.warn('Prisma engine not available during delete; using fallback');\n                    const fb = await getAttendanceFallback();\n                    existingDelSession = fb.find(id);\n                    if (!existingDelSession || existingDelSession.user_id !== tokenUserId) return res.status(404).json({\n                        success: false,\n                        error: 'Attendance session not found or you do not have permission to delete it'\n                    });\n                    fb.delete(id);\n                    return res.status(200).json({\n                        success: true,\n                        message: `Attendance session for ${existingDelSession.course || existingDelSession.course_id} deleted successfully`,\n                        deletedSession: {\n                            id: existingDelSession.id,\n                            date: existingDelSession.date.split('T')[0],\n                            course: existingDelSession.course || existingDelSession.course_id\n                        }\n                    });\n                }\n                throw err;\n            }\n        }\n    } catch (error) {\n        console.error('Error deleting attendance session:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Failed to delete attendance session',\n            details:  true ? error.message : 0\n        });\n    }\n}\n// Helper functions\nfunction isValidStatus(status) {\n    const validStatuses = [\n        'PRESENT',\n        'ABSENT',\n        'LATE',\n        'HOLIDAY',\n        'EXCUSED'\n    ];\n    return validStatuses.includes(status.toUpperCase());\n}\nfunction getDefaultPoints(status) {\n    switch(status.toUpperCase()){\n        case 'PRESENT':\n            return 2;\n        case 'EXCUSED':\n            return 1;\n        case 'LATE':\n            return 1; // idk what late is worth\n        case 'ABSENT':\n            return 0;\n        case 'HOLIDAY':\n            return 0;\n        default:\n            return 0;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/attendance.js\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next-auth/jwt":
/*!********************************!*\
  !*** external "next-auth/jwt" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("next-auth/jwt");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fattendance&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cattendance.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();