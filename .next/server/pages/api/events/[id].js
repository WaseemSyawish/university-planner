"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/events/[id]";
exports.ids = ["pages/api/events/[id]"];
exports.modules = {

/***/ "(api-node)/./lib/config.js":
/*!***********************!*\
  !*** ./lib/config.js ***!
  \***********************/
/***/ ((module) => {

eval("// Shared runtime config for client & server\n// Use a single source of truth for the minimum scheduling offset so client and server can't drift.\n\nconst MIN_SCHEDULE_OFFSET_MS = 4 * 60 * 1000; // 4 minutes (a bit more lenient than 4.5)\nconst MIN_SCHEDULE_OFFSET_LABEL = '4 minutes';\nmodule.exports = {\n    MIN_SCHEDULE_OFFSET_MS,\n    MIN_SCHEDULE_OFFSET_LABEL\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBQzVDLG1HQUFtRzs7QUFFbkcsTUFBTUEseUJBQXlCLElBQUksS0FBSyxNQUFNLDBDQUEwQztBQUN4RixNQUFNQyw0QkFBNEI7QUFFbENDLE9BQU9DLE9BQU8sR0FBRztJQUNmSDtJQUNBQztBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluaXN0cmF0b3JcXERlc2t0b3BcXHVuaXZlcnNpdHktcGxhbm5lclxcbGliXFxjb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2hhcmVkIHJ1bnRpbWUgY29uZmlnIGZvciBjbGllbnQgJiBzZXJ2ZXJcclxuLy8gVXNlIGEgc2luZ2xlIHNvdXJjZSBvZiB0cnV0aCBmb3IgdGhlIG1pbmltdW0gc2NoZWR1bGluZyBvZmZzZXQgc28gY2xpZW50IGFuZCBzZXJ2ZXIgY2FuJ3QgZHJpZnQuXHJcblxyXG5jb25zdCBNSU5fU0NIRURVTEVfT0ZGU0VUX01TID0gNCAqIDYwICogMTAwMDsgLy8gNCBtaW51dGVzIChhIGJpdCBtb3JlIGxlbmllbnQgdGhhbiA0LjUpXHJcbmNvbnN0IE1JTl9TQ0hFRFVMRV9PRkZTRVRfTEFCRUwgPSAnNCBtaW51dGVzJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIE1JTl9TQ0hFRFVMRV9PRkZTRVRfTVMsXHJcbiAgTUlOX1NDSEVEVUxFX09GRlNFVF9MQUJFTFxyXG59O1xyXG4iXSwibmFtZXMiOlsiTUlOX1NDSEVEVUxFX09GRlNFVF9NUyIsIk1JTl9TQ0hFRFVMRV9PRkZTRVRfTEFCRUwiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./lib/config.js\n");

/***/ }),

/***/ "(api-node)/./lib/eventsFallback.js":
/*!*******************************!*\
  !*** ./lib/eventsFallback.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst dataFile = path.join(process.cwd(), 'data', 'events.json');\nfunction ensureFile() {\n    const dir = path.dirname(dataFile);\n    if (!fs.existsSync(dir)) fs.mkdirSync(dir, {\n        recursive: true\n    });\n    if (!fs.existsSync(dataFile)) fs.writeFileSync(dataFile, JSON.stringify({\n        events: [],\n        nextId: 1\n    }, null, 2));\n}\nfunction read() {\n    ensureFile();\n    return JSON.parse(fs.readFileSync(dataFile, 'utf8'));\n}\nfunction write(obj) {\n    fs.writeFileSync(dataFile, JSON.stringify(obj, null, 2));\n}\nmodule.exports = {\n    list (showArchived = false) {\n        const obj = read();\n        if (showArchived) return obj.events;\n        return obj.events.filter((e)=>!e.archived);\n    },\n    create (payload) {\n        const obj = read();\n        const id = String(Date.now());\n        const ev = {\n            id,\n            ...payload,\n            archived: !!payload.archived,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        obj.events.push(ev);\n        obj.nextId = (obj.nextId || 0) + 1;\n        write(obj);\n        return ev;\n    },\n    find (id) {\n        const obj = read();\n        return obj.events.find((e)=>e.id === id);\n    },\n    update (id, payload) {\n        const obj = read();\n        const idx = obj.events.findIndex((e)=>e.id === id);\n        if (idx === -1) return null;\n        obj.events[idx] = {\n            ...obj.events[idx],\n            ...payload,\n            archived: payload.archived !== undefined ? !!payload.archived : obj.events[idx].archived,\n            updated_at: new Date().toISOString()\n        };\n        write(obj);\n        return obj.events[idx];\n    },\n    delete (id) {\n        const obj = read();\n        const idx = obj.events.findIndex((e)=>e.id === id);\n        if (idx === -1) return null;\n        const [deleted] = obj.events.splice(idx, 1);\n        write(obj);\n        return deleted;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9ldmVudHNGYWxsYmFjay5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsS0FBS0MsbUJBQU9BLENBQUMsY0FBSTtBQUN2QixNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUUzQixNQUFNRSxXQUFXRCxLQUFLRSxJQUFJLENBQUNDLFFBQVFDLEdBQUcsSUFBSSxRQUFRO0FBRWxELFNBQVNDO0lBQ1AsTUFBTUMsTUFBTU4sS0FBS08sT0FBTyxDQUFDTjtJQUN6QixJQUFJLENBQUNILEdBQUdVLFVBQVUsQ0FBQ0YsTUFBTVIsR0FBR1csU0FBUyxDQUFDSCxLQUFLO1FBQUVJLFdBQVc7SUFBSztJQUM3RCxJQUFJLENBQUNaLEdBQUdVLFVBQVUsQ0FBQ1AsV0FBV0gsR0FBR2EsYUFBYSxDQUFDVixVQUFVVyxLQUFLQyxTQUFTLENBQUM7UUFBRUMsUUFBUSxFQUFFO1FBQUVDLFFBQVE7SUFBRSxHQUFHLE1BQU07QUFDM0c7QUFFQSxTQUFTQztJQUNQWDtJQUNBLE9BQU9PLEtBQUtLLEtBQUssQ0FBQ25CLEdBQUdvQixZQUFZLENBQUNqQixVQUFVO0FBQzlDO0FBRUEsU0FBU2tCLE1BQU1DLEdBQUc7SUFDaEJ0QixHQUFHYSxhQUFhLENBQUNWLFVBQVVXLEtBQUtDLFNBQVMsQ0FBQ08sS0FBSyxNQUFNO0FBQ3ZEO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxNQUFLQyxlQUFlLEtBQUs7UUFDdkIsTUFBTUosTUFBTUo7UUFDWixJQUFJUSxjQUFjLE9BQU9KLElBQUlOLE1BQU07UUFDbkMsT0FBT00sSUFBSU4sTUFBTSxDQUFDVyxNQUFNLENBQUNDLENBQUFBLElBQUssQ0FBQ0EsRUFBRUMsUUFBUTtJQUMzQztJQUNBQyxRQUFPQyxPQUFPO1FBQ1osTUFBTVQsTUFBTUo7UUFDWixNQUFNYyxLQUFLQyxPQUFPQyxLQUFLQyxHQUFHO1FBQzFCLE1BQU1DLEtBQUs7WUFBRUo7WUFBSSxHQUFHRCxPQUFPO1lBQUVGLFVBQVUsQ0FBQyxDQUFDRSxRQUFRRixRQUFRO1lBQUVRLFlBQVksSUFBSUgsT0FBT0ksV0FBVztZQUFJQyxZQUFZLElBQUlMLE9BQU9JLFdBQVc7UUFBRztRQUN0SWhCLElBQUlOLE1BQU0sQ0FBQ3dCLElBQUksQ0FBQ0o7UUFDaEJkLElBQUlMLE1BQU0sR0FBRyxDQUFDSyxJQUFJTCxNQUFNLElBQUksS0FBSztRQUNqQ0ksTUFBTUM7UUFDTixPQUFPYztJQUNUO0lBQ0FLLE1BQUtULEVBQUU7UUFDTCxNQUFNVixNQUFNSjtRQUNaLE9BQU9JLElBQUlOLE1BQU0sQ0FBQ3lCLElBQUksQ0FBQ2IsQ0FBQUEsSUFBS0EsRUFBRUksRUFBRSxLQUFLQTtJQUN2QztJQUNBVSxRQUFPVixFQUFFLEVBQUVELE9BQU87UUFDaEIsTUFBTVQsTUFBTUo7UUFDWixNQUFNeUIsTUFBTXJCLElBQUlOLE1BQU0sQ0FBQzRCLFNBQVMsQ0FBQ2hCLENBQUFBLElBQUtBLEVBQUVJLEVBQUUsS0FBS0E7UUFDL0MsSUFBSVcsUUFBUSxDQUFDLEdBQUcsT0FBTztRQUN2QnJCLElBQUlOLE1BQU0sQ0FBQzJCLElBQUksR0FBRztZQUFFLEdBQUdyQixJQUFJTixNQUFNLENBQUMyQixJQUFJO1lBQUUsR0FBR1osT0FBTztZQUFFRixVQUFVRSxRQUFRRixRQUFRLEtBQUtnQixZQUFZLENBQUMsQ0FBQ2QsUUFBUUYsUUFBUSxHQUFHUCxJQUFJTixNQUFNLENBQUMyQixJQUFJLENBQUNkLFFBQVE7WUFBRVUsWUFBWSxJQUFJTCxPQUFPSSxXQUFXO1FBQUc7UUFDbkxqQixNQUFNQztRQUNOLE9BQU9BLElBQUlOLE1BQU0sQ0FBQzJCLElBQUk7SUFDeEI7SUFDQUcsUUFBT2QsRUFBRTtRQUNQLE1BQU1WLE1BQU1KO1FBQ1osTUFBTXlCLE1BQU1yQixJQUFJTixNQUFNLENBQUM0QixTQUFTLENBQUNoQixDQUFBQSxJQUFLQSxFQUFFSSxFQUFFLEtBQUtBO1FBQy9DLElBQUlXLFFBQVEsQ0FBQyxHQUFHLE9BQU87UUFDdkIsTUFBTSxDQUFDSSxRQUFRLEdBQUd6QixJQUFJTixNQUFNLENBQUNnQyxNQUFNLENBQUNMLEtBQUs7UUFDekN0QixNQUFNQztRQUNOLE9BQU95QjtJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5pc3RyYXRvclxcRGVza3RvcFxcdW5pdmVyc2l0eS1wbGFubmVyXFxsaWJcXGV2ZW50c0ZhbGxiYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuXHJcbmNvbnN0IGRhdGFGaWxlID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdkYXRhJywgJ2V2ZW50cy5qc29uJyk7XHJcblxyXG5mdW5jdGlvbiBlbnN1cmVGaWxlKCkge1xyXG4gIGNvbnN0IGRpciA9IHBhdGguZGlybmFtZShkYXRhRmlsZSk7XHJcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpIGZzLm1rZGlyU3luYyhkaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG4gIGlmICghZnMuZXhpc3RzU3luYyhkYXRhRmlsZSkpIGZzLndyaXRlRmlsZVN5bmMoZGF0YUZpbGUsIEpTT04uc3RyaW5naWZ5KHsgZXZlbnRzOiBbXSwgbmV4dElkOiAxIH0sIG51bGwsIDIpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZCgpIHtcclxuICBlbnN1cmVGaWxlKCk7XHJcbiAgcmV0dXJuIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGRhdGFGaWxlLCAndXRmOCcpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gd3JpdGUob2JqKSB7XHJcbiAgZnMud3JpdGVGaWxlU3luYyhkYXRhRmlsZSwgSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGxpc3Qoc2hvd0FyY2hpdmVkID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IG9iaiA9IHJlYWQoKTtcclxuICAgIGlmIChzaG93QXJjaGl2ZWQpIHJldHVybiBvYmouZXZlbnRzO1xyXG4gICAgcmV0dXJuIG9iai5ldmVudHMuZmlsdGVyKGUgPT4gIWUuYXJjaGl2ZWQpO1xyXG4gIH0sXHJcbiAgY3JlYXRlKHBheWxvYWQpIHtcclxuICAgIGNvbnN0IG9iaiA9IHJlYWQoKTtcclxuICAgIGNvbnN0IGlkID0gU3RyaW5nKERhdGUubm93KCkpO1xyXG4gICAgY29uc3QgZXYgPSB7IGlkLCAuLi5wYXlsb2FkLCBhcmNoaXZlZDogISFwYXlsb2FkLmFyY2hpdmVkLCBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9O1xyXG4gICAgb2JqLmV2ZW50cy5wdXNoKGV2KTtcclxuICAgIG9iai5uZXh0SWQgPSAob2JqLm5leHRJZCB8fCAwKSArIDE7XHJcbiAgICB3cml0ZShvYmopO1xyXG4gICAgcmV0dXJuIGV2O1xyXG4gIH0sXHJcbiAgZmluZChpZCkge1xyXG4gICAgY29uc3Qgb2JqID0gcmVhZCgpO1xyXG4gICAgcmV0dXJuIG9iai5ldmVudHMuZmluZChlID0+IGUuaWQgPT09IGlkKTtcclxuICB9LFxyXG4gIHVwZGF0ZShpZCwgcGF5bG9hZCkge1xyXG4gICAgY29uc3Qgb2JqID0gcmVhZCgpO1xyXG4gICAgY29uc3QgaWR4ID0gb2JqLmV2ZW50cy5maW5kSW5kZXgoZSA9PiBlLmlkID09PSBpZCk7XHJcbiAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuIG51bGw7XHJcbiAgICBvYmouZXZlbnRzW2lkeF0gPSB7IC4uLm9iai5ldmVudHNbaWR4XSwgLi4ucGF5bG9hZCwgYXJjaGl2ZWQ6IHBheWxvYWQuYXJjaGl2ZWQgIT09IHVuZGVmaW5lZCA/ICEhcGF5bG9hZC5hcmNoaXZlZCA6IG9iai5ldmVudHNbaWR4XS5hcmNoaXZlZCwgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH07XHJcbiAgICB3cml0ZShvYmopO1xyXG4gICAgcmV0dXJuIG9iai5ldmVudHNbaWR4XTtcclxuICB9LFxyXG4gIGRlbGV0ZShpZCkge1xyXG4gICAgY29uc3Qgb2JqID0gcmVhZCgpO1xyXG4gICAgY29uc3QgaWR4ID0gb2JqLmV2ZW50cy5maW5kSW5kZXgoZSA9PiBlLmlkID09PSBpZCk7XHJcbiAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBbZGVsZXRlZF0gPSBvYmouZXZlbnRzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgd3JpdGUob2JqKTtcclxuICAgIHJldHVybiBkZWxldGVkO1xyXG4gIH1cclxufTtcclxuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJkYXRhRmlsZSIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwiZW5zdXJlRmlsZSIsImRpciIsImRpcm5hbWUiLCJleGlzdHNTeW5jIiwibWtkaXJTeW5jIiwicmVjdXJzaXZlIiwid3JpdGVGaWxlU3luYyIsIkpTT04iLCJzdHJpbmdpZnkiLCJldmVudHMiLCJuZXh0SWQiLCJyZWFkIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJ3cml0ZSIsIm9iaiIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0Iiwic2hvd0FyY2hpdmVkIiwiZmlsdGVyIiwiZSIsImFyY2hpdmVkIiwiY3JlYXRlIiwicGF5bG9hZCIsImlkIiwiU3RyaW5nIiwiRGF0ZSIsIm5vdyIsImV2IiwiY3JlYXRlZF9hdCIsInRvSVNPU3RyaW5nIiwidXBkYXRlZF9hdCIsInB1c2giLCJmaW5kIiwidXBkYXRlIiwiaWR4IiwiZmluZEluZGV4IiwidW5kZWZpbmVkIiwiZGVsZXRlIiwiZGVsZXRlZCIsInNwbGljZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/eventsFallback.js\n");

/***/ }),

/***/ "(api-node)/./lib/prisma.js":
/*!***********************!*\
  !*** ./lib/prisma.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Shared Prisma client to avoid creating/disconnecting clients per-request\n\nconst { PrismaClient } = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n// Use Node's global object for compatibility with ESLint environments\nconst globalForPrisma = global;\nlet prisma;\nif (!globalForPrisma.__prisma) {\n    globalForPrisma.__prisma = new PrismaClient();\n}\nprisma = globalForPrisma.__prisma;\nmodule.exports = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9wcmlzbWEuanMiLCJtYXBwaW5ncyI6IkFBQUEsMkVBQTJFOztBQUMzRSxNQUFNLEVBQUVBLFlBQVksRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyxzQ0FBZ0I7QUFFakQsc0VBQXNFO0FBQ3RFLE1BQU1DLGtCQUFrQkM7QUFFeEIsSUFBSUM7QUFDSixJQUFJLENBQUNGLGdCQUFnQkcsUUFBUSxFQUFFO0lBQzdCSCxnQkFBZ0JHLFFBQVEsR0FBRyxJQUFJTDtBQUNqQztBQUVBSSxTQUFTRixnQkFBZ0JHLFFBQVE7QUFFakNDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5pc3RyYXRvclxcRGVza3RvcFxcdW5pdmVyc2l0eS1wbGFubmVyXFxsaWJcXHByaXNtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaGFyZWQgUHJpc21hIGNsaWVudCB0byBhdm9pZCBjcmVhdGluZy9kaXNjb25uZWN0aW5nIGNsaWVudHMgcGVyLXJlcXVlc3RcclxuY29uc3QgeyBQcmlzbWFDbGllbnQgfSA9IHJlcXVpcmUoJ0BwcmlzbWEvY2xpZW50Jyk7XHJcblxyXG4vLyBVc2UgTm9kZSdzIGdsb2JhbCBvYmplY3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBFU0xpbnQgZW52aXJvbm1lbnRzXHJcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbDtcclxuXHJcbmxldCBwcmlzbWE7XHJcbmlmICghZ2xvYmFsRm9yUHJpc21hLl9fcHJpc21hKSB7XHJcbiAgZ2xvYmFsRm9yUHJpc21hLl9fcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xyXG59XHJcblxyXG5wcmlzbWEgPSBnbG9iYWxGb3JQcmlzbWEuX19wcmlzbWE7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHByaXNtYTtcclxuIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInJlcXVpcmUiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWwiLCJwcmlzbWEiLCJfX3ByaXNtYSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/prisma.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_events_id_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\events\\[id].js */ \"(api-node)/./pages/api/events/[id].js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_events_id_js__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_events_id_js__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/events/[id]\",\n        pathname: \"/api/events/[id]\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_events_id_js__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/events/[id]\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/events/[id]\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/events/[id].js":
/*!**********************************!*\
  !*** ./pages/api/events/[id].js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// pages/api/events/[id].js\nconst prisma = __webpack_require__(/*! ../../../lib/prisma */ \"(api-node)/./lib/prisma.js\");\nconst fallback = __webpack_require__(/*! ../../../lib/eventsFallback */ \"(api-node)/./lib/eventsFallback.js\");\nconst { MIN_SCHEDULE_OFFSET_MS, MIN_SCHEDULE_OFFSET_LABEL } = __webpack_require__(/*! ../../../lib/config */ \"(api-node)/./lib/config.js\");\nfunction isDateOnly(value) {\n    return typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(value);\n}\nfunction parseDateForStorage(value) {\n    if (!value) return null;\n    if (Object.prototype.toString.call(value) === '[object Date]') return value;\n    const s = String(value);\n    // Treat date-only strings as local-midnight to avoid timezone shifting the day\n    if (isDateOnly(s)) return new Date(s + 'T00:00:00');\n    const parsed = new Date(s);\n    return isNaN(parsed.getTime()) ? null : parsed;\n}\nfunction isBeforeTodayLocal(date) {\n    if (!date) return false;\n    const d = Object.prototype.toString.call(date) === '[object Date]' ? date : new Date(String(date));\n    if (isNaN(d.getTime())) return false;\n    const now = new Date();\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const providedStart = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n    return providedStart < todayStart;\n}\nasync function handler(req, res) {\n    const { method } = req;\n    const { id } = req.query;\n    if (!id) {\n        return res.status(400).json({\n            code: 'MISSING_ID',\n            message: 'Event ID is required'\n        });\n    }\n    try {\n        // Helper: detect missing-column or unknown-argument DB/Prisma errors\n        const isMissingColumnError = (err)=>{\n            if (!err) return false;\n            const m = err && err.message ? String(err.message).toLowerCase() : '';\n            if (!m) return false;\n            if (m.includes('does not exist') || m.includes('no such column')) return true;\n            if (m.includes('unknown argument') || m.includes('unknown arg')) return true;\n            if (/unknown.*meta/.test(m)) return true;\n            return false;\n        };\n        // Helper: safely find an event by id, retrying without selecting `meta` if needed\n        const safeFindEvent = async (evtId, includeCourses = false)=>{\n            try {\n                if (includeCourses) return await prisma.event.findUnique({\n                    where: {\n                        id: evtId\n                    },\n                    include: {\n                        courses: true\n                    }\n                });\n                return await prisma.event.findUnique({\n                    where: {\n                        id: evtId\n                    }\n                });\n            } catch (e) {\n                if (!isMissingColumnError(e)) throw e;\n                // Retry by explicitly selecting known fields (exclude meta) and include relations if requested\n                const baseSelect = {\n                    id: true,\n                    title: true,\n                    type: true,\n                    location: true,\n                    archived: true,\n                    course_id: true,\n                    template_id: true,\n                    date: true,\n                    time: true,\n                    end_date: true,\n                    description: true,\n                    completed: true,\n                    user_id: true,\n                    created_at: true,\n                    updated_at: true\n                };\n                if (includeCourses) baseSelect.courses = true;\n                return await prisma.event.findUnique({\n                    where: {\n                        id: evtId\n                    },\n                    select: baseSelect\n                });\n            }\n        };\n        // Helper: safely update event; if missing-column error occurs, retry after removing `meta` from data\n        const safeUpdateEvent = async (evtId, data, includeCourses = false)=>{\n            try {\n                return await prisma.event.update({\n                    where: {\n                        id: evtId\n                    },\n                    data,\n                    include: includeCourses ? {\n                        courses: true\n                    } : undefined\n                });\n            } catch (e) {\n                if (!isMissingColumnError(e)) throw e;\n                console.warn('[events/:id] retrying update without `meta` due to DB schema mismatch');\n                const copy = {\n                    ...data\n                };\n                if (Object.prototype.hasOwnProperty.call(copy, 'meta')) delete copy.meta;\n                return await prisma.event.update({\n                    where: {\n                        id: evtId\n                    },\n                    data: copy,\n                    include: includeCourses ? {\n                        courses: true\n                    } : undefined\n                });\n            }\n        };\n        // Helper: safely create event; retry without meta if necessary\n        const safeCreateEvent = async (data, includeCourses = false)=>{\n            try {\n                return await prisma.event.create({\n                    data,\n                    include: includeCourses ? {\n                        courses: true\n                    } : undefined\n                });\n            } catch (e) {\n                if (!isMissingColumnError(e)) throw e;\n                console.warn('[events/:id] retrying create without `meta` due to DB schema mismatch');\n                const copy = {\n                    ...data\n                };\n                if (Object.prototype.hasOwnProperty.call(copy, 'meta')) delete copy.meta;\n                return await prisma.event.create({\n                    data: copy,\n                    include: includeCourses ? {\n                        courses: true\n                    } : undefined\n                });\n            }\n        };\n        switch(method){\n            case 'GET':\n                {\n                    try {\n                        const event = await safeFindEvent(id, true);\n                        if (!event) {\n                            return res.status(404).json({\n                                code: 'NOT_FOUND',\n                                message: 'Event not found'\n                            });\n                        }\n                        return res.status(200).json({\n                            success: true,\n                            event\n                        });\n                    } catch (err) {\n                        console.error(`[events/:id] GET prisma error for id=${id}:`, err && err.message ? err.message : err);\n                        // Prisma unreachable -> fallback to file store\n                        if (err && (err.code === 'P1001' || String(err.message || '').includes(\"Can't reach database\"))) {\n                            try {\n                                const local = fallback.find(id);\n                                if (!local) return res.status(404).json({\n                                    code: 'NOT_FOUND',\n                                    message: 'Event not found'\n                                });\n                                return res.status(200).json({\n                                    success: true,\n                                    event: local\n                                });\n                            } catch (fe) {\n                                console.error('[events/:id] fallback.find error:', fe && fe.message ? fe.message : fe);\n                            }\n                        }\n                        throw err;\n                    }\n                }\n            case 'PATCH':\n                {\n                    const updateData = {\n                        ...req.body\n                    } || {};\n                    console.log(`[events/:id] PATCH payload for id=${id}:`, JSON.stringify(updateData));\n                    // Normalize common client-side field names to DB column names\n                    if (Object.prototype.hasOwnProperty.call(updateData, 'courseId')) {\n                        updateData.course_id = updateData.courseId;\n                        delete updateData.courseId;\n                    }\n                    // normalize room -> location for backwards compatibility\n                    if (Object.prototype.hasOwnProperty.call(updateData, 'room') && !Object.prototype.hasOwnProperty.call(updateData, 'location')) {\n                        updateData.location = updateData.room;\n                        delete updateData.room;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(updateData, 'userId')) {\n                        updateData.user_id = updateData.userId;\n                        delete updateData.userId;\n                    }\n                    // Convert date strings to Date objects for Prisma where appropriate\n                    if (updateData.date) {\n                        const parsed = parseDateForStorage(updateData.date);\n                        if (parsed) {\n                            // Reject updates that set the event date to before today (local)\n                            if (isBeforeTodayLocal(parsed)) return res.status(400).json({\n                                code: 'PAST_DATE',\n                                message: 'Cannot set event date before today'\n                            });\n                            updateData.date = parsed;\n                        }\n                    }\n                    // Convert endDate/end_date to Date object if present\n                    if (updateData.endDate || updateData.end_date) {\n                        const endVal = updateData.endDate || updateData.end_date;\n                        const parsedEnd = parseDateForStorage(endVal);\n                        if (parsedEnd) updateData.end_date = parsedEnd;\n                        delete updateData.endDate;\n                    }\n                    // Remove fields that shouldn't be updated\n                    delete updateData.id;\n                    delete updateData.created_at;\n                    delete updateData.user_id;\n                    // Normalize incoming meta field (allow client to send structured JSON meta)\n                    if (Object.prototype.hasOwnProperty.call(updateData, 'meta')) {\n                    // leave as-is; persisted below via pickPrismaFields\n                    }\n                    const wantsArchived = Object.prototype.hasOwnProperty.call(updateData, 'archived') ? !!updateData.archived : undefined;\n                    if (Object.prototype.hasOwnProperty.call(updateData, 'completed')) {\n                        updateData.completed = !!updateData.completed;\n                    }\n                    // If archiving/unarchiving requested, move between tables\n                    if (wantsArchived === true) {\n                        // Move from Event -> ArchivedEvent\n                        const existing = await safeFindEvent(id, false);\n                        if (!existing) return res.status(404).json({\n                            code: 'NOT_FOUND',\n                            message: 'Event not found'\n                        });\n                        const created = await prisma.archivedEvent.create({\n                            data: {\n                                original_event_id: existing.id,\n                                title: updateData.title || existing.title,\n                                type: updateData.type || existing.type,\n                                course_id: updateData.course_id ?? existing.course_id,\n                                date: updateData.date ? parseDateForStorage(updateData.date) : existing.date,\n                                time: updateData.time ?? existing.time,\n                                description: updateData.description ?? existing.description,\n                                meta: updateData.meta ?? existing.meta ?? null,\n                                location: updateData.location ?? existing.location,\n                                completed: updateData.completed ?? existing.completed,\n                                user_id: existing.user_id\n                            },\n                            include: {\n                                courses: true\n                            }\n                        });\n                        // Delete original\n                        await prisma.event.delete({\n                            where: {\n                                id\n                            }\n                        });\n                        return res.status(200).json({\n                            success: true,\n                            event: created\n                        });\n                    }\n                    if (wantsArchived === false) {\n                        // If an active event already exists with this id, just update it (clear archived flag).\n                        // Only when no active event is present do we attempt to restore from archived_events.\n                        const maybeActive = await safeFindEvent(id, false);\n                        if (maybeActive) {\n                            const dataToApply = {\n                                ...updateData,\n                                archived: false\n                            };\n                            // Ensure we don't try to overwrite immutable fields\n                            delete dataToApply.id;\n                            delete dataToApply.created_at;\n                            delete dataToApply.user_id;\n                            const updated = await safeUpdateEvent(id, dataToApply, true);\n                            return res.status(200).json({\n                                success: true,\n                                event: updated\n                            });\n                        }\n                        // Move from ArchivedEvent -> Event\n                        // The archived table may be keyed either by original_event_id or its own id depending on how\n                        // records were created/migrated. Try both lookups so unarchive succeeds regardless.\n                        let archivedRec = await prisma.archivedEvent.findUnique({\n                            where: {\n                                original_event_id: id\n                            }\n                        });\n                        let deleteKey = {\n                            original_event_id: id\n                        };\n                        if (!archivedRec) {\n                            // try fallback: the provided id might be the archivedEvent.id\n                            archivedRec = await prisma.archivedEvent.findUnique({\n                                where: {\n                                    id\n                                }\n                            });\n                            if (archivedRec) deleteKey = {\n                                id\n                            };\n                        }\n                        if (!archivedRec) {\n                            const attempted = [\n                                'original_event_id',\n                                'id'\n                            ];\n                            console.warn(`[events/:id] unarchive failed for id=${id}: archived record not found (attempted keys: ${attempted.join(',')})`);\n                            return res.status(404).json({\n                                code: 'NOT_FOUND',\n                                message: 'Archived event not found',\n                                attempted\n                            });\n                        }\n                        const created = await safeCreateEvent({\n                            title: updateData.title || archivedRec.title,\n                            type: updateData.type || archivedRec.type,\n                            course_id: updateData.course_id ?? archivedRec.course_id,\n                            date: updateData.date ? parseDateForStorage(updateData.date) : archivedRec.date,\n                            time: updateData.time ?? archivedRec.time,\n                            description: updateData.description ?? archivedRec.description,\n                            meta: updateData.meta ?? archivedRec.meta ?? null,\n                            location: updateData.location ?? archivedRec.location,\n                            completed: updateData.completed ?? archivedRec.completed,\n                            archived: false,\n                            user_id: archivedRec.user_id\n                        }, true);\n                        // Delete archived copy using the resolved key\n                        await prisma.archivedEvent.delete({\n                            where: deleteKey\n                        });\n                        return res.status(200).json({\n                            success: true,\n                            event: created\n                        });\n                    }\n                    // Otherwise, update in whichever table the event currently resides\n                    // Try Event first\n                    // Validate: enforce min scheduling offset only when a time is provided (i.e., a timed event)\n                    if (updateData.time) {\n                        try {\n                            const now = new Date();\n                            const minAllowed = new Date(now.getTime() + MIN_SCHEDULE_OFFSET_MS);\n                            // combine either provided date or existing event date with new time\n                            let baseDate = updateData.date ? new Date(updateData.date) : null;\n                            if (!baseDate) {\n                                // try to lookup current record date to combine with provided time\n                                const existing = await safeFindEvent(id, false) || await prisma.archivedEvent.findUnique({\n                                    where: {\n                                        original_event_id: id\n                                    }\n                                });\n                                baseDate = existing ? new Date(existing.date) : null;\n                            }\n                            if (!baseDate || isNaN(baseDate.getTime())) {\n                                // Instead of failing the entire update when the base date is unknown (which\n                                // can happen for migrated or partial records), log and skip the min-offset check.\n                                console.warn(`[events/:id] PATCH skipping time min-offset check: baseDate missing or invalid for id=${id}`);\n                            } else {\n                                const [hh, mm] = String(updateData.time).split(':').map(Number);\n                                const incomingDateTime = new Date(baseDate.getFullYear(), baseDate.getMonth(), baseDate.getDate(), hh || 0, mm || 0);\n                                if (isNaN(incomingDateTime.getTime())) {\n                                    console.warn(`[events/:id] PATCH invalid incomingDateTime for id=${id}, skipping min-offset check`);\n                                } else if (incomingDateTime < minAllowed) {\n                                    // Keep the existing enforcement if the computed datetime is valid\n                                    return res.status(400).json({\n                                        code: 'SCHED_MIN_OFFSET',\n                                        message: `Please schedule events at least ${MIN_SCHEDULE_OFFSET_LABEL} from now.`\n                                    });\n                                }\n                            }\n                        } catch (err) {\n                            // If anything goes wrong during this non-critical validation, log and continue\n                            console.warn(`[events/:id] PATCH time validation failed for id=${id}:`, err && err.message ? err.message : err);\n                        }\n                    }\n                    // Helper: pick only fields that exist on the Prisma Event/ArchivedEvent models\n                    const pickPrismaFields = (src)=>{\n                        const allowed = [\n                            'title',\n                            'type',\n                            'course_id',\n                            'date',\n                            'time',\n                            'end_date',\n                            'description',\n                            'completed',\n                            'archived',\n                            'location',\n                            'meta'\n                        ];\n                        const out = {};\n                        for (const k of allowed){\n                            if (Object.prototype.hasOwnProperty.call(src, k)) out[k] = src[k];\n                        }\n                        return out;\n                    };\n                    // Attempt to update in active events; if not found, try archived table explicitly\n                    try {\n                        // diagnostic: check where the record currently exists\n                        const existingEvent = await safeFindEvent(id, false);\n                        const existingArchived = await prisma.archivedEvent.findUnique({\n                            where: {\n                                original_event_id: id\n                            }\n                        });\n                        console.info(`[events/:id] update target lookup for id=${id}: event=${existingEvent ? 'found' : 'missing'}, archived=${existingArchived ? 'found' : 'missing'}`);\n                        const dataToApply = pickPrismaFields(updateData);\n                        const updated = await safeUpdateEvent(id, dataToApply, true);\n                        return res.status(200).json({\n                            success: true,\n                            event: updated\n                        });\n                    } catch (err) {\n                        console.error(`[events/:id] prisma.event.update error for id=${id}:`, err && err.message ? err.message : err);\n                        // Try the file-backed fallback for any update error so UI doesn't break when Prisma/DB is flaky\n                        try {\n                            const local = fallback.update(id, updateData);\n                            if (local) return res.status(200).json({\n                                success: true,\n                                event: local,\n                                fallback: true\n                            });\n                        } catch (fe) {\n                            console.error('[events/:id] fallback.update error:', fe && fe.message ? fe.message : fe);\n                        }\n                        // If the error is record not found in the primary table, try archivedEvent (database-side)\n                        if (err && err.code === 'P2025') {\n                            // If record wasn't found in active events, try updating archived record.\n                            // Archived rows may be keyed by original_event_id or by their own id; try both.\n                            try {\n                                const archivedUpdate = await prisma.archivedEvent.update({\n                                    where: {\n                                        original_event_id: id\n                                    },\n                                    data: pickPrismaFields(updateData),\n                                    include: {\n                                        courses: true\n                                    }\n                                });\n                                return res.status(200).json({\n                                    success: true,\n                                    event: archivedUpdate\n                                });\n                            } catch (err2) {\n                                console.info(`[events/:id] archivedEvent.update by original_event_id failed for id=${id}, trying by archived id`);\n                                try {\n                                    const archivedUpdate2 = await prisma.archivedEvent.update({\n                                        where: {\n                                            id\n                                        },\n                                        data: pickPrismaFields(updateData),\n                                        include: {\n                                            courses: true\n                                        }\n                                    });\n                                    return res.status(200).json({\n                                        success: true,\n                                        event: archivedUpdate2\n                                    });\n                                } catch (err3) {\n                                    console.error(`[events/:id] archivedEvent.update error for id=${id}:`, err3 && err3.message ? err3.message : err3);\n                                    // Add attempted keys to error for debugging\n                                    err3.attempted = [\n                                        'original_event_id',\n                                        'id'\n                                    ];\n                                    throw err3;\n                                }\n                            }\n                        }\n                        // Some Prisma errors include useful metadata - surface it in development\n                        if (err && err.message) {\n                            return res.status(500).json({\n                                code: 'PRISMA_ERROR',\n                                message: 'Database update failed',\n                                details: err.message\n                            });\n                        }\n                        // Otherwise re-throw to be handled by outer catch\n                        throw err;\n                    }\n                }\n            case 'DELETE':\n                {\n                    // If client requested deleting the entire series (all materialized occurrences),\n                    // support ?scope=all by deleting all events with the same template_id and the template record.\n                    try {\n                        const scope = req.query && req.query.scope ? String(req.query.scope) : null;\n                        if (scope === 'all') {\n                            // Find the event in active events first\n                            const ev = await safeFindEvent(id, false);\n                            let tplId = ev ? ev.template_id : null;\n                            // If not found in active events, try archived lookup\n                            if (!tplId) {\n                                const archived = await prisma.archivedEvent.findUnique({\n                                    where: {\n                                        original_event_id: id\n                                    }\n                                }) || await prisma.archivedEvent.findUnique({\n                                    where: {\n                                        id\n                                    }\n                                });\n                                tplId = archived ? archived.template_id : null;\n                            }\n                            if (!tplId) {\n                                return res.status(400).json({\n                                    code: 'NO_TEMPLATE',\n                                    message: 'Event is not part of a repeat series or template id is missing'\n                                });\n                            }\n                            // Delete all materialized events and the template in a transaction\n                            try {\n                                const result = await prisma.$transaction(async (tx)=>{\n                                    const deleted = await tx.event.deleteMany({\n                                        where: {\n                                            template_id: tplId\n                                        }\n                                    });\n                                    // Attempt to delete the template record; ignore if already removed\n                                    try {\n                                        await tx.eventTemplate.delete({\n                                            where: {\n                                                id: tplId\n                                            }\n                                        });\n                                    } catch (ignore) {\n                                    // swallow not-found errors for template deletion\n                                    }\n                                    return deleted;\n                                });\n                                return res.status(200).json({\n                                    success: true,\n                                    message: 'Series deleted',\n                                    deletedCount: result.count\n                                });\n                            } catch (txErr) {\n                                console.error(`[events/:id] DELETE series transaction error for template_id=${tplId}:`, txErr && txErr.message ? txErr.message : txErr);\n                                return res.status(500).json({\n                                    code: 'DELETE_SERIES_FAILED',\n                                    message: 'Failed to delete event series',\n                                    details: txErr && txErr.message ? txErr.message : null\n                                });\n                            }\n                        }\n                        // Otherwise fall back to single-event delete\n                        await prisma.event.delete({\n                            where: {\n                                id\n                            }\n                        });\n                        return res.status(200).json({\n                            success: true,\n                            message: 'Event deleted'\n                        });\n                    } catch (err) {\n                        console.error(`[events/:id] DELETE prisma.event.delete error for id=${id}:`, err && err.message ? err.message : err);\n                        // If DB unreachable, try file fallback\n                        if (err && (err.code === 'P1001' || String(err.message || '').includes(\"Can't reach database\"))) {\n                            try {\n                                const local = fallback.delete(id);\n                                if (local) return res.status(200).json({\n                                    success: true,\n                                    message: 'Event deleted',\n                                    event: local\n                                });\n                            } catch (fe) {\n                                console.error('[events/:id] fallback.delete error:', fe && fe.message ? fe.message : fe);\n                            }\n                        }\n                        // Try archived\n                        try {\n                            // Try delete by original_event_id first\n                            await prisma.archivedEvent.delete({\n                                where: {\n                                    original_event_id: id\n                                }\n                            });\n                            return res.status(200).json({\n                                success: true,\n                                message: 'Archived event deleted'\n                            });\n                        } catch (err2) {\n                            // If not found, attempt to delete by archived record id\n                            try {\n                                await prisma.archivedEvent.delete({\n                                    where: {\n                                        id\n                                    }\n                                });\n                                return res.status(200).json({\n                                    success: true,\n                                    message: 'Archived event deleted'\n                                });\n                            } catch (err3) {\n                                return res.status(404).json({\n                                    code: 'NOT_FOUND',\n                                    message: 'Event not found'\n                                });\n                            }\n                        }\n                    }\n                }\n            default:\n                res.setHeader('Allow', [\n                    'GET',\n                    'PATCH',\n                    'DELETE'\n                ]);\n                return res.status(405).json({\n                    success: false,\n                    error: `Method ${method} Not Allowed`\n                });\n        }\n    } catch (error) {\n        console.error('Events [id] API error:', error);\n        if (error.code === 'P2025') {\n            return res.status(404).json({\n                code: 'NOT_FOUND',\n                message: 'Event not found'\n            });\n        }\n        return res.status(500).json({\n            code: 'INTERNAL_ERROR',\n            message: 'Internal server error',\n            details: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/events/[id].js\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();