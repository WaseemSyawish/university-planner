"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/holidays";
exports.ids = ["pages/api/holidays"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fholidays&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cholidays.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fholidays&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cholidays.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_holidays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\holidays.js */ \"(api-node)/./pages/api/holidays.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_holidays_js__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_holidays_js__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/holidays\",\n        pathname: \"/api/holidays\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_holidays_js__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/holidays\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/holidays\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fholidays&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cholidays.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/holidays.js":
/*!*******************************!*\
  !*** ./pages/api/holidays.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst CACHE_DIR = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'data');\n// Safely fetch remote holidays and return an array or empty array on error.\nasync function fetchRemoteHolidays(year, country) {\n    const url = `https://date.nager.at/api/v3/PublicHolidays/${year}/${country}`;\n    try {\n        const r = await fetch(url, {\n            headers: {\n                'User-Agent': 'university-planner'\n            },\n            timeout: 8000\n        });\n        if (!r.ok) {\n            console.warn('Remote holidays fetch returned non-OK status', r.status, url);\n            return [];\n        }\n        const txt = await r.text();\n        if (!txt || !txt.trim()) {\n            console.info('Remote holidays fetch returned empty body for', `${year}-${country}`, url);\n            return [];\n        }\n        try {\n            const remote = JSON.parse(txt);\n            if (Array.isArray(remote) && remote.length > 0) return remote;\n            return [];\n        } catch (parseErr) {\n            const snippet = txt.length > 1000 ? txt.slice(0, 1000) + '...[truncated]' : txt;\n            console.warn('Failed parsing remote holidays JSON for', `${year}-${country}`, 'from', url, 'parseError:', parseErr.message);\n            console.debug('Remote holidays body snippet:', snippet);\n            return [];\n        }\n    } catch (err) {\n        console.error('Failed fetching remote holidays for', `${year}-${country}`, err && err.message ? err.message : err);\n        return [];\n    }\n}\nasync function handler(req, res) {\n    const { year, country } = req.query;\n    // Accept a single year or a range like 2024-2026\n    // Accept a single year or a range like 2024-2026\n    const requested = String(year || '').trim();\n    const cc = String(country || 'IQ').toUpperCase();\n    let years = [];\n    if (!requested) years = [\n        new Date().getFullYear()\n    ];\n    else if (/^\\d{4}$/.test(requested)) years = [\n        Number(requested)\n    ];\n    else if (/^\\d{4}-\\d{4}$/.test(requested)) {\n        const [a, b] = requested.split('-').map(Number);\n        for(let y = Math.min(a, b); y <= Math.max(a, b); y++)years.push(y);\n    } else {\n        // fall back to current year\n        years = [\n            new Date().getFullYear()\n        ];\n    }\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(CACHE_DIR)) fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(CACHE_DIR, {\n            recursive: true\n        });\n        // For each requested year, try to load or fetch and cache results; combine into one list\n        let holidays = [];\n        for (const yyyy of years){\n            const cacheFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(CACHE_DIR, `holidays-${cc}-${yyyy}.json`);\n            let cached = null;\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(cacheFile)) {\n                try {\n                    const raw = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(cacheFile, 'utf8');\n                    cached = JSON.parse(raw || '[]');\n                } catch (e) {\n                    cached = null;\n                }\n            }\n            if (cached) {\n                holidays.push(...cached);\n            } else {\n                try {\n                    const remote = await fetchRemoteHolidays(yyyy, cc);\n                    holidays.push(...remote);\n                    try {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(cacheFile, JSON.stringify(remote, null, 2), 'utf8');\n                    } catch (e) {}\n                } catch (e) {\n                    console.error(`Failed fetching remote holidays for ${yyyy}-${cc}`, e);\n                }\n            }\n        }\n        // Merge with local Kurdistan/Iraq overrides if present\n        const localOverridesFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(CACHE_DIR, `holidays-iq-kurdistan.json`);\n        let overrides = [];\n        try {\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(localOverridesFile)) {\n                const raw = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(localOverridesFile, 'utf8');\n                overrides = JSON.parse(raw || '[]');\n            }\n        } catch (e) {\n            console.error('Failed reading local holidays overrides', e);\n        }\n        // Filter overrides down to only the requested years to avoid unrelated entries\n        const overrideFiltered = (overrides || []).filter((o)=>{\n            try {\n                const y = Number(String(o.date || '').slice(0, 4));\n                return years.includes(y);\n            } catch (e) {\n                return false;\n            }\n        });\n        // Also load any normalized academic holiday files (created from local PDFs)\n        try {\n            const files = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(CACHE_DIR);\n            const acadFiles = files.filter((f)=>f.startsWith('holidays-academic-') && f.endsWith('-normalized.json'));\n            for (const af of acadFiles){\n                try {\n                    const raw = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(CACHE_DIR, af), 'utf8');\n                    const parsed = JSON.parse(raw || '[]');\n                    const filtered = parsed.filter((o)=>{\n                        const y = Number(String(o.date || '').slice(0, 4));\n                        return years.includes(y);\n                    });\n                    overrideFiltered.push(...filtered);\n                } catch (e) {\n                // non-fatal\n                }\n            }\n        } catch (e) {\n        // non-fatal\n        }\n        // Combine and dedupe by date+name\n        const combined = [];\n        const seen = new Set();\n        (holidays || []).concat(overrideFiltered || []).forEach((h)=>{\n            const key = `${h.date}::${(h.localName || h.name || '').toLowerCase()}`;\n            if (!seen.has(key)) {\n                seen.add(key);\n                combined.push(h);\n            }\n        });\n        // Add computed Eid dates (tabular Islamic calendar approximation) for requested years\n        const computed = [];\n        // Add common recurring holidays (Easter Gregorian, Christmas, Newroz, Iraq Independence Day)\n        function computeGregorianEaster(Y) {\n            // Meeus/Jones/Butcher Gregorian algorithm\n            const a = Y % 19;\n            const b = Math.floor(Y / 100);\n            const c = Y % 100;\n            const d = Math.floor(b / 4);\n            const e = b % 4;\n            const f = Math.floor((b + 8) / 25);\n            const g = Math.floor((b - f + 1) / 3);\n            const h = (19 * a + b - d - g + 15) % 30;\n            const i = Math.floor(c / 4);\n            const k = c % 4;\n            const l = (32 + 2 * e + 2 * i - h - k) % 7;\n            const m = Math.floor((a + 11 * h + 22 * l) / 451);\n            const month = Math.floor((h + l - 7 * m + 114) / 31); // 3=March,4=April\n            const day = (h + l - 7 * m + 114) % 31 + 1;\n            const mm = String(month).padStart(2, '0');\n            const dd = String(day).padStart(2, '0');\n            return `${Y}-${mm}-${dd}`;\n        }\n        function addRecurringHolidays(Y) {\n            // Easter (Gregorian)\n            computed.push({\n                date: computeGregorianEaster(Y),\n                localName: 'Easter',\n                name: 'Easter',\n                counties: [],\n                countryCode: cc,\n                fixed: false,\n                global: true\n            });\n            // Christmas (Dec 25)\n            computed.push({\n                date: `${Y}-12-25`,\n                localName: 'Christmas Day',\n                name: 'Christmas Day',\n                counties: [],\n                countryCode: cc,\n                fixed: true,\n                global: true\n            });\n            // Newroz (Mar 21) - Kurdish New Year\n            computed.push({\n                date: `${Y}-03-21`,\n                localName: 'Newroz',\n                name: 'Newroz (Kurdish New Year)',\n                counties: [\n                    'Kurdistan Region'\n                ],\n                countryCode: cc,\n                fixed: true,\n                global: false\n            });\n            // Iraq Independence Day (Oct 3) - national day\n            computed.push({\n                date: `${Y}-10-03`,\n                localName: 'Independence Day',\n                name: 'Iraq Independence Day',\n                counties: [],\n                countryCode: cc,\n                fixed: true,\n                global: true\n            });\n        }\n        // If a precise Eid lookup file exists, prefer it for exact dates\n        const eidLookupFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(CACHE_DIR, 'holiday-eid-lookup.json');\n        let eidLookup = [];\n        try {\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(eidLookupFile)) eidLookup = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(eidLookupFile, 'utf8') || '[]');\n        } catch (e) {\n            eidLookup = [];\n        }\n        // helper: convert civil/tabular Islamic date to Julian Day Number\n        function islamicToJD(iy, im, id) {\n            // using arithmetic Islamic calendar\n            const n = id + Math.ceil(29.5 * (im - 1)) + (iy - 1) * 354 + Math.floor((3 + 11 * iy) / 30);\n            // 1948439 is the Julian day number for 1 Muharram, year 1 AH in some references\n            return n + 1948439;\n        }\n        // Fliegel & Van Flandern algorithm: convert Julian day number to Gregorian date\n        function jdToGregorian(jd) {\n            let j = Math.floor(jd) + 0; // ensure integer\n            let l = j + 68569;\n            let n = Math.floor(4 * l / 146097);\n            l = l - Math.floor((146097 * n + 3) / 4);\n            let i = Math.floor(4000 * (l + 1) / 1461001);\n            l = l - Math.floor(1461 * i / 4) + 31;\n            let j1 = Math.floor(80 * l / 2447);\n            let day = l - Math.floor(2447 * j1 / 80);\n            l = Math.floor(j1 / 11);\n            let month = j1 + 2 - 12 * l;\n            let year = 100 * (n - 49) + i + l;\n            return {\n                year,\n                month,\n                day\n            };\n        }\n        // For a Gregorian year Y, estimate likely Hijri years and compute Eid dates\n        const addEidForYear = (Y)=>{\n            // Check lookup first\n            const found = eidLookup.find((x)=>Number(x.year) === Number(Y));\n            if (found) {\n                if (found.eidFitr) computed.push({\n                    date: found.eidFitr,\n                    localName: 'Eid al-Fitr',\n                    name: 'Eid al-Fitr',\n                    counties: [],\n                    countryCode: cc,\n                    fixed: false,\n                    global: true\n                });\n                if (found.eidAdha) computed.push({\n                    date: found.eidAdha,\n                    localName: 'Eid al-Adha',\n                    name: 'Eid al-Adha',\n                    counties: [],\n                    countryCode: cc,\n                    fixed: false,\n                    global: true\n                });\n                return;\n            }\n            const approxHijri = Math.floor((Y - 622) * 33 / 32);\n            const candidates = [\n                approxHijri - 1,\n                approxHijri,\n                approxHijri + 1,\n                approxHijri + 2\n            ];\n            for (const hy of candidates){\n                if (hy <= 0) continue;\n                // Eid al-Fitr: 1 Shawwal (month 10, day 1)\n                try {\n                    const jdFitr = islamicToJD(hy, 10, 1);\n                    const gFitr = jdToGregorian(jdFitr);\n                    if (gFitr.year === Y) {\n                        const mm = String(gFitr.month).padStart(2, '0');\n                        const dd = String(gFitr.day).padStart(2, '0');\n                        computed.push({\n                            date: `${gFitr.year}-${mm}-${dd}`,\n                            localName: 'Eid al-Fitr',\n                            name: 'Eid al-Fitr',\n                            counties: [],\n                            countryCode: cc,\n                            fixed: false,\n                            global: true\n                        });\n                    }\n                } catch (e) {}\n                // Eid al-Adha: 10 Dhu al-Hijjah (month 12, day 10)\n                try {\n                    const jdAdha = islamicToJD(hy, 12, 10);\n                    const gAdha = jdToGregorian(jdAdha);\n                    if (gAdha.year === Y) {\n                        const mm = String(gAdha.month).padStart(2, '0');\n                        const dd = String(gAdha.day).padStart(2, '0');\n                        computed.push({\n                            date: `${gAdha.year}-${mm}-${dd}`,\n                            localName: 'Eid al-Adha',\n                            name: 'Eid al-Adha',\n                            counties: [],\n                            countryCode: cc,\n                            fixed: false,\n                            global: true\n                        });\n                    }\n                } catch (e) {}\n            }\n        };\n        for (const y of years){\n            addEidForYear(y);\n            addRecurringHolidays(y);\n        }\n        // Merge computed eid entries, avoiding duplicates\n        for (const e of computed){\n            const key = `${e.date}::${(e.localName || e.name || '').toLowerCase()}`;\n            if (!seen.has(key)) {\n                seen.add(key);\n                combined.push(e);\n            }\n        }\n        return res.status(200).json({\n            source: 'combined',\n            holidays: combined\n        });\n    } catch (err) {\n        console.error('Holidays API error', err);\n        // If fetching failed, attempt to return any existing cache\n        try {\n            const cacheFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(CACHE_DIR, `holidays-${String(country || 'IQ').toUpperCase()}-${Number(year) || new Date().getFullYear()}.json`);\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(cacheFile)) {\n                const raw = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(cacheFile, 'utf8');\n                const parsed = JSON.parse(raw || '[]');\n                return res.status(200).json({\n                    source: 'cache-on-error',\n                    holidays: parsed\n                });\n            }\n        } catch (e) {\n            console.error('Failed reading cache during error fallback', e);\n        }\n        return res.status(502).json({\n            error: 'Unable to fetch holidays'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/holidays.js\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fholidays&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cholidays.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();