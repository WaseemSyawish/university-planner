"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/events";
exports.ids = ["pages/api/events"];
exports.modules = {

/***/ "(api-node)/./lib/prisma.js":
/*!***********************!*\
  !*** ./lib/prisma.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Shared Prisma client to avoid creating/disconnecting clients per-request\n\nconst { PrismaClient } = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n// Use Node's global object for compatibility with ESLint environments\nconst globalForPrisma = global;\nlet prisma;\nif (!globalForPrisma.__prisma) {\n    globalForPrisma.__prisma = new PrismaClient();\n}\nprisma = globalForPrisma.__prisma;\nmodule.exports = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9wcmlzbWEuanMiLCJtYXBwaW5ncyI6IkFBQUEsMkVBQTJFOztBQUMzRSxNQUFNLEVBQUVBLFlBQVksRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyxzQ0FBZ0I7QUFFakQsc0VBQXNFO0FBQ3RFLE1BQU1DLGtCQUFrQkM7QUFFeEIsSUFBSUM7QUFDSixJQUFJLENBQUNGLGdCQUFnQkcsUUFBUSxFQUFFO0lBQzdCSCxnQkFBZ0JHLFFBQVEsR0FBRyxJQUFJTDtBQUNqQztBQUVBSSxTQUFTRixnQkFBZ0JHLFFBQVE7QUFFakNDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQWRtaW5pc3RyYXRvclxcRGVza3RvcFxcdW5pdmVyc2l0eS1wbGFubmVyXFxsaWJcXHByaXNtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaGFyZWQgUHJpc21hIGNsaWVudCB0byBhdm9pZCBjcmVhdGluZy9kaXNjb25uZWN0aW5nIGNsaWVudHMgcGVyLXJlcXVlc3RcclxuY29uc3QgeyBQcmlzbWFDbGllbnQgfSA9IHJlcXVpcmUoJ0BwcmlzbWEvY2xpZW50Jyk7XHJcblxyXG4vLyBVc2UgTm9kZSdzIGdsb2JhbCBvYmplY3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBFU0xpbnQgZW52aXJvbm1lbnRzXHJcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbDtcclxuXHJcbmxldCBwcmlzbWE7XHJcbmlmICghZ2xvYmFsRm9yUHJpc21hLl9fcHJpc21hKSB7XHJcbiAgZ2xvYmFsRm9yUHJpc21hLl9fcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xyXG59XHJcblxyXG5wcmlzbWEgPSBnbG9iYWxGb3JQcmlzbWEuX19wcmlzbWE7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHByaXNtYTtcclxuIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInJlcXVpcmUiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWwiLCJwcmlzbWEiLCJfX3ByaXNtYSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/prisma.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_events_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\events\\index.js */ \"(api-node)/./pages/api/events/index.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_events_index_js__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_events_index_js__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/events\",\n        pathname: \"/api/events\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_events_index_js__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/events\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/events\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/events/index.js":
/*!***********************************!*\
  !*** ./pages/api/events/index.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst prisma = __webpack_require__(/*! ../../../lib/prisma */ \"(api-node)/./lib/prisma.js\");\n// Helper: treat date-only strings (YYYY-MM-DD) as a date without local-midnight\n// to avoid timezone shifts when parsed by `new Date(string)`.\nfunction isDateOnly(value) {\n    return typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(value);\n}\nfunction localDateOnlyString(d) {\n    if (!d) return null;\n    const dt = Object.prototype.toString.call(d) === '[object Date]' ? d : new Date(String(d));\n    if (isNaN(dt.getTime())) return null;\n    const y = dt.getFullYear();\n    const m = String(dt.getMonth() + 1).padStart(2, '0');\n    const day = String(dt.getDate()).padStart(2, '0');\n    return `${y}-${m}-${day}`;\n}\nfunction parseDateForStorage(value) {\n    if (!value) return new Date();\n    if (Object.prototype.toString.call(value) === '[object Date]') return value;\n    const s = String(value);\n    // If it's a pure date like 2025-09-21, anchor it to local midnight to avoid\n    // timezone offsets that could move it to the previous/next day.\n    if (isDateOnly(s)) return new Date(s + 'T00:00:00');\n    const parsed = new Date(s);\n    return isNaN(parsed.getTime()) ? new Date() : parsed;\n}\nfunction isBeforeTodayLocal(date) {\n    if (!date) return false;\n    const d = Object.prototype.toString.call(date) === '[object Date]' ? date : new Date(String(date));\n    if (isNaN(d.getTime())) return false;\n    const now = new Date();\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    // If the provided date's y/m/d is strictly less than today's y/m/d, it's before today\n    const providedStart = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n    return providedStart < todayStart;\n}\n// Detect common Prisma/DB error messages that indicate the `meta` field\n// is not present/understood by the current schema. Messages vary by\n// driver/version, so be permissive: missing-column messages and the\n// Prisma \"Unknown argument `meta`\" style errors are both handled.\nfunction isPrismaMetaError(msg) {\n    const m = String(msg || '').toLowerCase();\n    if (!m) return false;\n    if (m.includes('does not exist') || m.includes('no such column')) return true;\n    if (m.includes('unknown argument') || m.includes('unknown arg')) return true;\n    // additional safeguard for messages that mention `meta` specifically\n    if (/unknown.*meta/.test(m)) return true;\n    return false;\n}\nasync function handler(req, res) {\n    // Support OPTIONS for simple CORS checks or preflight from tools\n    if (req.method === 'OPTIONS') {\n        res.setHeader('Allow', 'GET,POST,OPTIONS');\n        return res.status(204).end();\n    }\n    // Allow GET to fetch events for a user (used by the client)\n    if (req.method === 'GET') {\n        try {\n            // Prefer server-side auth token user id when available to ensure isolation.\n            // In development, allow a query param for testing. In production, require a valid token.\n            const { getToken } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! next-auth/jwt */ \"next-auth/jwt\", 23));\n            const token = await getToken({\n                req,\n                secret: process.env.NEXTAUTH_SECRET || 'dev-nextauth-secret'\n            });\n            const tokenUserId = token && token.userId ? token.userId : null;\n            let userId = null;\n            if (tokenUserId) {\n                userId = tokenUserId;\n            } else if ( true && req.query && req.query.userId) {\n                userId = String(req.query.userId);\n            } else {\n                return res.status(401).json({\n                    error: 'Unauthorized'\n                });\n            }\n            // Some local databases may not have the `meta` column (older schema).\n            // Attempt the normal query, but if Prisma complains about a missing column,\n            // retry by explicitly selecting all fields except `meta` so the query succeeds.\n            let events;\n            try {\n                events = await prisma.event.findMany({\n                    where: {\n                        user_id: userId\n                    },\n                    orderBy: {\n                        date: 'desc'\n                    }\n                });\n            } catch (e) {\n                // Detect a missing `meta` field or unknown-argument error and retry\n                // with an explicit select that does not reference meta.\n                const msg = e && e.message ? String(e.message) : '';\n                if (isPrismaMetaError(msg)) {\n                    console.warn('[api/events] retrying findMany without `meta` due to DB schema mismatch');\n                    // Explicitly select fields we know exist (mirror Event model without meta)\n                    events = await prisma.event.findMany({\n                        where: {\n                            user_id: userId\n                        },\n                        orderBy: {\n                            date: 'desc'\n                        },\n                        select: {\n                            id: true,\n                            title: true,\n                            type: true,\n                            location: true,\n                            archived: true,\n                            course_id: true,\n                            template_id: true,\n                            date: true,\n                            time: true,\n                            end_date: true,\n                            description: true,\n                            completed: true,\n                            user_id: true,\n                            created_at: true,\n                            updated_at: true\n                        }\n                    });\n                } else {\n                    throw e;\n                }\n            }\n            // Normalize date fields to local YYYY-MM-DD strings to avoid client-side timezone shifts\n            const normalized = events.map((ev)=>({\n                    ...ev,\n                    date: localDateOnlyString(ev.date)\n                }));\n            return res.status(200).json({\n                events: normalized\n            });\n        } catch (err) {\n            console.error('GET /api/events error', err);\n            return res.status(500).json({\n                error: 'Failed to fetch events'\n            });\n        }\n    }\n    if (req.method === 'POST') {\n        try {\n            const { title, type, courseId, date, time, description, notes, subtasks, attachments, durationMinutes, repeatOption } = req.body;\n            // Debug: log truncated incoming body to help diagnose missing materialize/template flags\n            try {\n                const safeBody = JSON.stringify(req.body, Object.keys(req.body).slice(0, 30)).slice(0, 2000);\n                console.info('[api/events] incoming POST body (truncated):', safeBody);\n            } catch (e) {\n            // ignore stringify errors\n            }\n            // Prefer token-derived user id; otherwise accept provided userId only in development for testing\n            const { getToken } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! next-auth/jwt */ \"next-auth/jwt\", 23));\n            const token = await getToken({\n                req,\n                secret: process.env.NEXTAUTH_SECRET || 'dev-nextauth-secret'\n            });\n            const tokenUserId = token && token.userId ? token.userId : null;\n            const suppliedUserId = req.body && req.body.userId ? String(req.body.userId) : null;\n            const incomingLocation = req.body && (req.body.location || req.body.room) ? req.body.location || req.body.room : null;\n            console.info('[api/events] POST payload:', JSON.stringify({\n                title,\n                type,\n                courseId,\n                date,\n                time,\n                description,\n                durationMinutes,\n                location: incomingLocation\n            }));\n            const dt = parseDateForStorage(date);\n            // normalize room -> location\n            const location = req.body && (req.body.location || req.body.room) ? req.body.location || req.body.room : null;\n            if (date && isBeforeTodayLocal(dt)) {\n                return res.status(400).json({\n                    code: 'PAST_DATE',\n                    message: 'Cannot create events before today'\n                });\n            }\n            // Resolve user id strictly from token; in development allow supplied userId for testing\n            let resolvedUserId = null;\n            if (tokenUserId) {\n                resolvedUserId = tokenUserId;\n            } else if ( true && suppliedUserId) {\n                const u = await prisma.user.findUnique({\n                    where: {\n                        id: suppliedUserId\n                    }\n                });\n                if (u) resolvedUserId = u.id;\n                else console.warn('[api/events] POST supplied userId not found in development');\n            }\n            if (!resolvedUserId) {\n                return res.status(401).json({\n                    error: 'Unauthorized'\n                });\n            }\n            console.info('[api/events] resolvedUserId:', resolvedUserId);\n            // Persist notes/subtasks/attachments by serializing into description when provided\n            let finalDescription = description || null;\n            if (!finalDescription && notes) finalDescription = String(notes);\n            // If there are structured extras (subtasks/attachments) append them as JSON under a marker\n            const extras = {};\n            if (subtasks) extras.subtasks = subtasks;\n            if (attachments) extras.attachments = attachments;\n            if (Object.keys(extras).length > 0) {\n                try {\n                    const jsonExtras = JSON.stringify(extras);\n                    finalDescription = finalDescription ? finalDescription + '\\n\\n' + jsonExtras : jsonExtras;\n                } catch (e) {}\n            }\n            // Persist meta object if provided (meta is sent separately by clients)\n            const metaToStore = req.body && req.body.meta ? req.body.meta : null;\n            // If the client intended to create a timetable template (a collection of modules)\n            // they can send `isTemplate: true` or `templateModules` in the body. In that case\n            // we should store the template payload and NOT materialize individual Event rows.\n            // Existing behavior when `repeatOption` is provided without `isTemplate` is preserved\n            // (create a template + materialize occurrences as before).\n            let created = null;\n            const isTemplate = !!(req.body && (req.body.isTemplate || Array.isArray(req.body.templateModules)));\n            if (isTemplate) {\n                // Persist the provided modules/config as a JSON payload on EventTemplate\n                const payload = req.body.templateModules || req.body.templatePayload || null;\n                const tplData = {\n                    title: title || null,\n                    course_id: courseId || null,\n                    repeat_option: repeatOption || null,\n                    start_date: dt || null,\n                    payload: payload,\n                    user_id: resolvedUserId\n                };\n                const tpl = await prisma.eventTemplate.create({\n                    data: tplData\n                });\n                created = {\n                    template_id: tpl.id,\n                    template: tpl\n                };\n            } else if (repeatOption) {\n                // New behavior: materialize occurrences only when explicitly requested.\n                const materialize = !!req.body.materialize;\n                const materializeCount = Number.isFinite(Number(req.body.materializeCount)) ? Number(req.body.materializeCount) : null;\n                const materializeUntil = req.body.materializeUntil ? String(req.body.materializeUntil) : null;\n                // If no explicit materialization or template flag provided, refuse to implicitly create a template.\n                // Templates must be created explicitly by the client (isTemplate: true) so templates remain\n                // authoritative and empty by default unless the user chooses to populate them.\n                if (!materialize && !materializeCount && !materializeUntil && !isTemplate) {\n                    return res.status(400).json({\n                        code: 'MUST_SPECIFY_TEMPLATE_OR_MATERIALIZE',\n                        message: 'When creating repeating schedules you must either set isTemplate=true to save a timetable template, or set materialize/materializeCount/materializeUntil to materialize occurrences.'\n                    });\n                }\n                // If we reach here and materialization flags are present, proceed to materialize occurrences.\n                if (materialize || materializeCount || materializeUntil) {\n                    // Helper to compute occurrences (same logic as client-side generateOccurrences)\n                    // Enhanced computeOccurrences: supports optional `byDays` (array of weekday numbers 0-6)\n                    // and `interval` (number of weeks between repeats) supplied by the client in req.body.\n                    // This lets callers request e.g. two instances per week (Mon+Wed) by sending\n                    // { repeatOption: 'weekly', byDays: [1,3], interval: 1, materializeUntil: '2026-01-15' }\n                    const computeOccurrences = (startDate, opt, maxCount = 40)=>{\n                        const out = [];\n                        const start = new Date(startDate);\n                        const year = start.getFullYear();\n                        let end = new Date(year, 0, 15);\n                        if (end <= start) end = new Date(year + 1, 0, 15);\n                        // Allow client to supply an explicit 'until' bound via materializeUntil; caller filters later.\n                        // Interval in weeks (default 1)\n                        const intervalWeeks = Number.isFinite(Number(req.body && req.body.interval)) && Number(req.body.interval) > 0 ? Number(req.body.interval) : 1;\n                        // byDays: optional array of numbers 0 (Sun) .. 6 (Sat)\n                        const byDays = Array.isArray(req.body && req.body.byDays) && req.body.byDays.length > 0 ? req.body.byDays.map((d)=>Number(d)).filter((d)=>Number.isFinite(d) && d >= 0 && d <= 6) : null;\n                        let cursor = new Date(start);\n                        let count = 0;\n                        const pushIf = (d)=>{\n                            if (d <= end && count < maxCount) {\n                                out.push(new Date(d));\n                                count += 1;\n                            }\n                        };\n                        if (opt === 'every-2-3-4') {\n                            while(cursor <= end && count < maxCount){\n                                pushIf(new Date(cursor));\n                                cursor.setDate(cursor.getDate() + 14);\n                            }\n                            return out;\n                        }\n                        // If byDays is provided, iterate day-by-day and select matching weekdays.\n                        if (byDays && byDays.length > 0) {\n                            // We use a week-index to support multi-week intervals: include a day only when\n                            // Math.floor(daysSinceStart/7) % intervalWeeks === 0\n                            const startTime = start.getTime();\n                            let safeGuard = 0;\n                            while(cursor <= end && count < maxCount && safeGuard < 10000){\n                                const daysSinceStart = Math.floor((cursor.getTime() - startTime) / (1000 * 60 * 60 * 24));\n                                const weekIndex = Math.floor(daysSinceStart / 7);\n                                const weekday = cursor.getDay();\n                                if (byDays.includes(weekday) && weekIndex % intervalWeeks === 0) {\n                                    pushIf(new Date(cursor));\n                                }\n                                cursor.setDate(cursor.getDate() + 1);\n                                safeGuard += 1;\n                            }\n                            return out;\n                        }\n                        // Default: weekly stepping by intervalWeeks\n                        let safeGuard = 0;\n                        while(cursor <= end && count < maxCount && safeGuard < 10000){\n                            pushIf(new Date(cursor));\n                            cursor.setDate(cursor.getDate() + 7 * intervalWeeks);\n                            safeGuard += 1;\n                        }\n                        return out;\n                    };\n                    // compute occurrences: respect materializeCount or materializeUntil when provided\n                    const occDates = (()=>{\n                        if (materializeCount && materializeCount > 0) return computeOccurrences(dt, repeatOption, materializeCount);\n                        if (materializeUntil) {\n                            const until = parseDateForStorage(materializeUntil);\n                            const all = computeOccurrences(dt, repeatOption, 365);\n                            return all.filter((d)=>new Date(d).getTime() <= new Date(until).getTime());\n                        }\n                        return computeOccurrences(dt, repeatOption, 40);\n                    })();\n                    // Create template record first and materialize events in a transaction\n                    const templateData = {\n                        title: title || null,\n                        course_id: courseId || null,\n                        repeat_option: repeatOption || null,\n                        start_date: dt,\n                        user_id: resolvedUserId\n                    };\n                    const result = await prisma.$transaction(async (tx)=>{\n                        const tpl = await tx.eventTemplate.create({\n                            data: templateData\n                        });\n                        const createdEvents = [];\n                        for (const d of occDates){\n                            // Attempt to create event including meta; if the DB/schema rejects the column,\n                            // retry without meta so older databases continue to work.\n                            try {\n                                const createData = {\n                                    title: title || '',\n                                    type: type || 'assignment',\n                                    course_id: courseId || null,\n                                    date: d,\n                                    time: time || null,\n                                    description: finalDescription,\n                                    location: location,\n                                    user_id: resolvedUserId ? String(resolvedUserId) : null,\n                                    template_id: tpl.id\n                                };\n                                if (metaToStore !== null) createData.meta = metaToStore;\n                                try {\n                                    console.info('[api/events] creating materialized event for template with data:', JSON.stringify({\n                                        ...createData,\n                                        meta: undefined\n                                    }).slice(0, 2000));\n                                } catch (e) {}\n                                const ev = await tx.event.create({\n                                    data: createData\n                                });\n                                createdEvents.push(ev);\n                            } catch (ee) {\n                                const mmsg = ee && ee.message ? String(ee.message) : '';\n                                if (isPrismaMetaError(mmsg)) {\n                                    // retry without meta\n                                    const ev2 = await tx.event.create({\n                                        data: {\n                                            title: title || '',\n                                            type: type || 'assignment',\n                                            course_id: courseId || null,\n                                            date: d,\n                                            time: time || null,\n                                            description: finalDescription,\n                                            location: location,\n                                            user_id: resolvedUserId ? String(resolvedUserId) : null,\n                                            template_id: tpl.id\n                                        }\n                                    });\n                                    createdEvents.push(ev2);\n                                } else {\n                                    throw ee;\n                                }\n                            }\n                        }\n                        return {\n                            template: tpl,\n                            events: createdEvents\n                        };\n                    });\n                    const materialized = result.events || [];\n                    created = materialized.length ? materialized[0] : null;\n                    if (created) {\n                        created.template_id = result.template.id;\n                        // Do not attach the full materialized array directly to the returned object\n                        // as it will include the `created` item itself and produce circular JSON.\n                        // Instead expose a safe summary: count and a small preview of ids/dates.\n                        try {\n                            created._materialized_count = materialized.length;\n                            created._materialized_preview = materialized.slice(0, 5).map((ev)=>({\n                                    id: ev.id,\n                                    date: localDateOnlyString(ev.date)\n                                }));\n                        } catch (e) {\n                        // ignore preview failures\n                        }\n                    }\n                }\n            } else {\n                // compute end_date from provided endDate or durationMinutes\n                let endDateToStore = null;\n                if (req.body && req.body.endDate) {\n                    endDateToStore = parseDateForStorage(req.body.endDate);\n                } else if (typeof durationMinutes !== 'undefined' && durationMinutes !== null) {\n                    endDateToStore = new Date(parseDateForStorage(date).getTime() + Number(durationMinutes) * 60000);\n                }\n                try {\n                    const createData = {\n                        title,\n                        type: type || 'assignment',\n                        course_id: courseId || null,\n                        date: dt,\n                        time: time || null,\n                        end_date: endDateToStore,\n                        description: finalDescription,\n                        location: location,\n                        user_id: resolvedUserId ? String(resolvedUserId) : null\n                    };\n                    if (metaToStore !== null) createData.meta = metaToStore;\n                    try {\n                        console.info('[api/events] creating single event with data:', JSON.stringify({\n                            ...createData,\n                            meta: undefined\n                        }).slice(0, 2000));\n                    } catch (e) {}\n                    created = await prisma.event.create({\n                        data: createData\n                    });\n                } catch (ee) {\n                    const mmsg = ee && ee.message ? String(ee.message) : '';\n                    if (isPrismaMetaError(mmsg)) {\n                        console.warn('[api/events] retrying create without `meta` due to DB schema mismatch');\n                        created = await prisma.event.create({\n                            data: {\n                                title,\n                                type: type || 'assignment',\n                                course_id: courseId || null,\n                                date: dt,\n                                time: time || null,\n                                end_date: endDateToStore,\n                                description: finalDescription,\n                                location: location,\n                                user_id: resolvedUserId ? String(resolvedUserId) : null\n                            }\n                        });\n                    } else {\n                        throw ee;\n                    }\n                }\n            }\n            // Only persist attachment metadata when we've created an Event (not when creating a template)\n            if (!isTemplate && attachments && Array.isArray(attachments) && attachments.length > 0) {\n                try {\n                    for (const a of attachments){\n                        try {\n                            const safeName = a.name ? String(a.name).replace(/[^\\w.\\-]/g, '_') : 'file-' + Date.now();\n                            await prisma.attachment.create({\n                                data: {\n                                    filename: safeName,\n                                    path: null,\n                                    mime: a.type || null,\n                                    size: a.size || null,\n                                    event_id: created.id\n                                }\n                            });\n                        } catch (e) {\n                            console.warn('attachment meta create failed', e);\n                        }\n                    }\n                } catch (e) {\n                    console.warn('attachments handling failed', e);\n                }\n            }\n            // Return created entity. If we created a template, return it under `template`.\n            try {\n                if (isTemplate && created && created.template) {\n                    return res.status(201).json({\n                        template: created.template\n                    });\n                }\n                const ret = {\n                    ...created,\n                    durationMinutes: typeof durationMinutes !== 'undefined' ? durationMinutes : null\n                };\n                // normalize date to local date-only string\n                if (ret && ret.date) ret.date = localDateOnlyString(ret.date);\n                return res.status(201).json({\n                    event: ret\n                });\n            } catch (e) {\n                if (isTemplate && created && created.template) return res.status(201).json({\n                    template: created.template\n                });\n                return res.status(201).json({\n                    event: {\n                        ...created,\n                        durationMinutes: typeof durationMinutes !== 'undefined' ? durationMinutes : null\n                    }\n                });\n            }\n        } catch (err) {\n            // Log full error with stack for debugging\n            try {\n                console.error('[api/events] POST error:', err && err.stack ? err.stack : err);\n            } catch (e) {\n                console.error('[api/events] POST error (failed to stringify):', err);\n            }\n            // In development, return error details to help debug client-side\n            if (true) {\n                const details = err && (err.message || err.toString()) ? err.message || String(err) : 'unknown error';\n                return res.status(500).json({\n                    error: 'Failed to create event',\n                    details\n                });\n            }\n            return res.status(500).json({\n                error: 'Failed to create event'\n            });\n        }\n    }\n    res.setHeader('Allow', 'GET,POST,OPTIONS');\n    res.status(405).end();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/events/index.js\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next-auth/jwt":
/*!********************************!*\
  !*** external "next-auth/jwt" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("next-auth/jwt");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();