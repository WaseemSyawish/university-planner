"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_src_providers_schedular-provider_tsx";
exports.ids = ["_pages-dir-node_src_providers_schedular-provider_tsx"];
exports.modules = {

/***/ "(pages-dir-node)/./src/providers/modal-context.tsx":
/*!*****************************************!*\
  !*** ./src/providers/modal-context.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModalContext: () => (/* binding */ ModalContext),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   useModal: () => (/* binding */ useModal)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ ModalContext,default,useModal auto */ \n\nconst ModalContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    data: {},\n    isOpen: {},\n    canClose: {},\n    setOpen: ()=>{},\n    setClose: ()=>{},\n    setCanClose: ()=>{}\n});\nconst ModalProvider = ({ children })=>{\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [modals, setModals] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [canClose, setCanCloseState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const setOpen = async (modal, fetchdata, modalId = \"default\")=>{\n        if (fetchdata) {\n            const fetchedData = await fetchdata();\n            setData((prev)=>({\n                    ...prev,\n                    [modalId]: fetchedData || null\n                }));\n        }\n        setIsOpen((prev)=>({\n                ...prev,\n                [modalId]: true\n            }));\n        setModals((prev)=>({\n                ...prev,\n                [modalId]: modal\n            }));\n        // Only update canClose if needed.\n        setCanCloseState((prev)=>prev[modalId] === true ? prev : {\n                ...prev,\n                [modalId]: true\n            });\n    };\n    const setClose = (modalId = \"default\")=>{\n        if (canClose[modalId] !== false) {\n            setIsOpen((prev)=>({\n                    ...prev,\n                    [modalId]: false\n                }));\n            setData((prev)=>({\n                    ...prev,\n                    [modalId]: null\n                }));\n            setModals((prev)=>{\n                const newState = {\n                    ...prev\n                };\n                delete newState[modalId];\n                return newState;\n            });\n            setCanCloseState((prev)=>{\n                const newState = {\n                    ...prev\n                };\n                delete newState[modalId];\n                return newState;\n            });\n        }\n    };\n    const setCanClose = (modalId, value)=>{\n        setCanCloseState((prev)=>{\n            // Only update if the value changes\n            if (prev[modalId] === value) return prev;\n            return {\n                ...prev,\n                [modalId]: value\n            };\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ModalContext.Provider, {\n        value: {\n            data,\n            isOpen,\n            canClose,\n            setOpen,\n            setClose,\n            setCanClose\n        },\n        children: [\n            children,\n            Object.entries(modals).map(([id, modal])=>isOpen[id] && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), {\n                    children: modal\n                }, id, false, {\n                    fileName: \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\university-planner\\\\src\\\\providers\\\\modal-context.tsx\",\n                    lineNumber: 86,\n                    columnNumber: 25\n                }, undefined))\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\university-planner\\\\src\\\\providers\\\\modal-context.tsx\",\n        lineNumber: 80,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalProvider);\nconst useModal = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ModalContext);\n    if (!context) {\n        throw new Error(\"useModal must be used within a ModalProvider\");\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3NyYy9wcm92aWRlcnMvbW9kYWwtY29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFbUU7QUFlNUQsTUFBTUksNkJBQWVILG9EQUFhQSxDQUFtQjtJQUMxREksTUFBTSxDQUFDO0lBQ1BDLFFBQVEsQ0FBQztJQUNUQyxVQUFVLENBQUM7SUFDWEMsU0FBUyxLQUFPO0lBQ2hCQyxVQUFVLEtBQU87SUFDakJDLGFBQWEsS0FBTztBQUN0QixHQUFHO0FBTUgsTUFBTUMsZ0JBQThDLENBQUMsRUFBRUMsUUFBUSxFQUFFO0lBQy9ELE1BQU0sQ0FBQ04sUUFBUU8sVUFBVSxHQUFHViwrQ0FBUUEsQ0FBMEIsQ0FBQztJQUMvRCxNQUFNLENBQUNFLE1BQU1TLFFBQVEsR0FBR1gsK0NBQVFBLENBQXNCLENBQUM7SUFDdkQsTUFBTSxDQUFDWSxRQUFRQyxVQUFVLEdBQUdiLCtDQUFRQSxDQUFrQyxDQUFDO0lBQ3ZFLE1BQU0sQ0FBQ0ksVUFBVVUsaUJBQWlCLEdBQUdkLCtDQUFRQSxDQUEwQixDQUFDO0lBRXhFLE1BQU1LLFVBQVUsT0FDZFUsT0FDQUMsV0FDQUMsVUFBa0IsU0FBUztRQUUzQixJQUFJRCxXQUFXO1lBQ2IsTUFBTUUsY0FBYyxNQUFNRjtZQUMxQkwsUUFBUSxDQUFDUSxPQUFVO29CQUFFLEdBQUdBLElBQUk7b0JBQUUsQ0FBQ0YsUUFBUSxFQUFFQyxlQUFlO2dCQUFLO1FBQy9EO1FBQ0FSLFVBQVUsQ0FBQ1MsT0FBVTtnQkFBRSxHQUFHQSxJQUFJO2dCQUFFLENBQUNGLFFBQVEsRUFBRTtZQUFLO1FBQ2hESixVQUFVLENBQUNNLE9BQVU7Z0JBQUUsR0FBR0EsSUFBSTtnQkFBRSxDQUFDRixRQUFRLEVBQUVGO1lBQU07UUFDakQsa0NBQWtDO1FBQ2xDRCxpQkFBaUIsQ0FBQ0ssT0FDaEJBLElBQUksQ0FBQ0YsUUFBUSxLQUFLLE9BQU9FLE9BQU87Z0JBQUUsR0FBR0EsSUFBSTtnQkFBRSxDQUFDRixRQUFRLEVBQUU7WUFBSztJQUUvRDtJQUVBLE1BQU1YLFdBQVcsQ0FBQ1csVUFBa0IsU0FBUztRQUMzQyxJQUFJYixRQUFRLENBQUNhLFFBQVEsS0FBSyxPQUFPO1lBQy9CUCxVQUFVLENBQUNTLE9BQVU7b0JBQUUsR0FBR0EsSUFBSTtvQkFBRSxDQUFDRixRQUFRLEVBQUU7Z0JBQU07WUFDakROLFFBQVEsQ0FBQ1EsT0FBVTtvQkFBRSxHQUFHQSxJQUFJO29CQUFFLENBQUNGLFFBQVEsRUFBRTtnQkFBSztZQUM5Q0osVUFBVSxDQUFDTTtnQkFDVCxNQUFNQyxXQUFXO29CQUFFLEdBQUdELElBQUk7Z0JBQUM7Z0JBQzNCLE9BQU9DLFFBQVEsQ0FBQ0gsUUFBUTtnQkFDeEIsT0FBT0c7WUFDVDtZQUNBTixpQkFBaUIsQ0FBQ0s7Z0JBQ2hCLE1BQU1DLFdBQVc7b0JBQUUsR0FBR0QsSUFBSTtnQkFBQztnQkFDM0IsT0FBT0MsUUFBUSxDQUFDSCxRQUFRO2dCQUN4QixPQUFPRztZQUNUO1FBQ0Y7SUFDRjtJQUVBLE1BQU1iLGNBQWMsQ0FBQ1UsU0FBaUJJO1FBQ3BDUCxpQkFBaUIsQ0FBQ0s7WUFDaEIsbUNBQW1DO1lBQ25DLElBQUlBLElBQUksQ0FBQ0YsUUFBUSxLQUFLSSxPQUFPLE9BQU9GO1lBQ3BDLE9BQU87Z0JBQUUsR0FBR0EsSUFBSTtnQkFBRSxDQUFDRixRQUFRLEVBQUVJO1lBQU07UUFDckM7SUFDRjtJQUVBLHFCQUNFLDhEQUFDcEIsYUFBYXFCLFFBQVE7UUFDcEJELE9BQU87WUFBRW5CO1lBQU1DO1lBQVFDO1lBQVVDO1lBQVNDO1lBQVVDO1FBQVk7O1lBRS9ERTtZQUNBYyxPQUFPQyxPQUFPLENBQUNaLFFBQVFhLEdBQUcsQ0FDekIsQ0FBQyxDQUFDQyxJQUFJWCxNQUFNLEdBQ1ZaLE1BQU0sQ0FBQ3VCLEdBQUcsa0JBQUksOERBQUM3Qix1REFBYzs4QkFBV2tCO21CQUFMVzs7Ozs7Ozs7Ozs7QUFJN0M7QUFFQSxpRUFBZWxCLGFBQWFBLEVBQUM7QUFFdEIsTUFBTW9CLFdBQVc7SUFDdEIsTUFBTUMsVUFBVTlCLGlEQUFVQSxDQUFDRTtJQUMzQixJQUFJLENBQUM0QixTQUFTO1FBQ1osTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVCxFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluaXN0cmF0b3JcXERlc2t0b3BcXHVuaXZlcnNpdHktcGxhbm5lclxcc3JjXFxwcm92aWRlcnNcXG1vZGFsLWNvbnRleHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbnRlcmZhY2UgTW9kYWxDb250ZXh0VHlwZSB7XHJcbiAgZGF0YTogUmVjb3JkPHN0cmluZywgYW55PjtcclxuICBpc09wZW46IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xyXG4gIGNhbkNsb3NlOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPjtcclxuICBzZXRDYW5DbG9zZTogKG1vZGFsSWQ6IHN0cmluZywgY2FuQ2xvc2U6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgc2V0T3BlbjogKFxyXG4gICAgbW9kYWw6IFJlYWN0LlJlYWN0Tm9kZSxcclxuICAgIGZldGNoZGF0YT86ICgpID0+IFByb21pc2U8YW55PixcclxuICAgIG1vZGFsSWQ/OiBzdHJpbmdcclxuICApID0+IHZvaWQ7XHJcbiAgc2V0Q2xvc2U6IChtb2RhbElkPzogc3RyaW5nKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTW9kYWxDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxNb2RhbENvbnRleHRUeXBlPih7XHJcbiAgZGF0YToge30sXHJcbiAgaXNPcGVuOiB7fSxcclxuICBjYW5DbG9zZToge30sXHJcbiAgc2V0T3BlbjogKCkgPT4ge30sXHJcbiAgc2V0Q2xvc2U6ICgpID0+IHt9LFxyXG4gIHNldENhbkNsb3NlOiAoKSA9PiB7fSxcclxufSk7XHJcblxyXG5pbnRlcmZhY2UgTW9kYWxQcm92aWRlclByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xyXG59XHJcblxyXG5jb25zdCBNb2RhbFByb3ZpZGVyOiBSZWFjdC5GQzxNb2RhbFByb3ZpZGVyUHJvcHM+ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xyXG4gIGNvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oe30pO1xyXG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIGFueT4+KHt9KTtcclxuICBjb25zdCBbbW9kYWxzLCBzZXRNb2RhbHNdID0gdXNlU3RhdGU8UmVjb3JkPHN0cmluZywgUmVhY3QuUmVhY3ROb2RlPj4oe30pO1xyXG4gIGNvbnN0IFtjYW5DbG9zZSwgc2V0Q2FuQ2xvc2VTdGF0ZV0gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oe30pO1xyXG5cclxuICBjb25zdCBzZXRPcGVuID0gYXN5bmMgKFxyXG4gICAgbW9kYWw6IFJlYWN0LlJlYWN0Tm9kZSxcclxuICAgIGZldGNoZGF0YT86ICgpID0+IFByb21pc2U8YW55PixcclxuICAgIG1vZGFsSWQ6IHN0cmluZyA9IFwiZGVmYXVsdFwiXHJcbiAgKSA9PiB7XHJcbiAgICBpZiAoZmV0Y2hkYXRhKSB7XHJcbiAgICAgIGNvbnN0IGZldGNoZWREYXRhID0gYXdhaXQgZmV0Y2hkYXRhKCk7XHJcbiAgICAgIHNldERhdGEoKHByZXYpID0+ICh7IC4uLnByZXYsIFttb2RhbElkXTogZmV0Y2hlZERhdGEgfHwgbnVsbCB9KSk7XHJcbiAgICB9XHJcbiAgICBzZXRJc09wZW4oKHByZXYpID0+ICh7IC4uLnByZXYsIFttb2RhbElkXTogdHJ1ZSB9KSk7XHJcbiAgICBzZXRNb2RhbHMoKHByZXYpID0+ICh7IC4uLnByZXYsIFttb2RhbElkXTogbW9kYWwgfSkpO1xyXG4gICAgLy8gT25seSB1cGRhdGUgY2FuQ2xvc2UgaWYgbmVlZGVkLlxyXG4gICAgc2V0Q2FuQ2xvc2VTdGF0ZSgocHJldikgPT5cclxuICAgICAgcHJldlttb2RhbElkXSA9PT0gdHJ1ZSA/IHByZXYgOiB7IC4uLnByZXYsIFttb2RhbElkXTogdHJ1ZSB9XHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNldENsb3NlID0gKG1vZGFsSWQ6IHN0cmluZyA9IFwiZGVmYXVsdFwiKSA9PiB7XHJcbiAgICBpZiAoY2FuQ2xvc2VbbW9kYWxJZF0gIT09IGZhbHNlKSB7XHJcbiAgICAgIHNldElzT3BlbigocHJldikgPT4gKHsgLi4ucHJldiwgW21vZGFsSWRdOiBmYWxzZSB9KSk7XHJcbiAgICAgIHNldERhdGEoKHByZXYpID0+ICh7IC4uLnByZXYsIFttb2RhbElkXTogbnVsbCB9KSk7XHJcbiAgICAgIHNldE1vZGFscygocHJldikgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5wcmV2IH07XHJcbiAgICAgICAgZGVsZXRlIG5ld1N0YXRlW21vZGFsSWRdO1xyXG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgICAgfSk7XHJcbiAgICAgIHNldENhbkNsb3NlU3RhdGUoKHByZXYpID0+IHtcclxuICAgICAgICBjb25zdCBuZXdTdGF0ZSA9IHsgLi4ucHJldiB9O1xyXG4gICAgICAgIGRlbGV0ZSBuZXdTdGF0ZVttb2RhbElkXTtcclxuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNldENhbkNsb3NlID0gKG1vZGFsSWQ6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pID0+IHtcclxuICAgIHNldENhbkNsb3NlU3RhdGUoKHByZXYpID0+IHtcclxuICAgICAgLy8gT25seSB1cGRhdGUgaWYgdGhlIHZhbHVlIGNoYW5nZXNcclxuICAgICAgaWYgKHByZXZbbW9kYWxJZF0gPT09IHZhbHVlKSByZXR1cm4gcHJldjtcclxuICAgICAgcmV0dXJuIHsgLi4ucHJldiwgW21vZGFsSWRdOiB2YWx1ZSB9O1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxNb2RhbENvbnRleHQuUHJvdmlkZXJcclxuICAgICAgdmFsdWU9e3sgZGF0YSwgaXNPcGVuLCBjYW5DbG9zZSwgc2V0T3Blbiwgc2V0Q2xvc2UsIHNldENhbkNsb3NlIH19XHJcbiAgICA+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgICAge09iamVjdC5lbnRyaWVzKG1vZGFscykubWFwKFxyXG4gICAgICAgIChbaWQsIG1vZGFsXSkgPT5cclxuICAgICAgICAgIGlzT3BlbltpZF0gJiYgPFJlYWN0LkZyYWdtZW50IGtleT17aWR9Pnttb2RhbH08L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICApfVxyXG4gICAgPC9Nb2RhbENvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1vZGFsUHJvdmlkZXI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlTW9kYWwgPSAoKSA9PiB7XHJcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoTW9kYWxDb250ZXh0KTtcclxuICBpZiAoIWNvbnRleHQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcInVzZU1vZGFsIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBNb2RhbFByb3ZpZGVyXCIpO1xyXG4gIH1cclxuICByZXR1cm4gY29udGV4dDtcclxufTtcclxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsIk1vZGFsQ29udGV4dCIsImRhdGEiLCJpc09wZW4iLCJjYW5DbG9zZSIsInNldE9wZW4iLCJzZXRDbG9zZSIsInNldENhbkNsb3NlIiwiTW9kYWxQcm92aWRlciIsImNoaWxkcmVuIiwic2V0SXNPcGVuIiwic2V0RGF0YSIsIm1vZGFscyIsInNldE1vZGFscyIsInNldENhbkNsb3NlU3RhdGUiLCJtb2RhbCIsImZldGNoZGF0YSIsIm1vZGFsSWQiLCJmZXRjaGVkRGF0YSIsInByZXYiLCJuZXdTdGF0ZSIsInZhbHVlIiwiUHJvdmlkZXIiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwiaWQiLCJGcmFnbWVudCIsInVzZU1vZGFsIiwiY29udGV4dCIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/providers/modal-context.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./src/providers/schedular-provider.tsx":
/*!**********************************************!*\
  !*** ./src/providers/schedular-provider.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchedulerProvider: () => (/* binding */ SchedulerProvider),\n/* harmony export */   useScheduler: () => (/* binding */ useScheduler),\n/* harmony export */   variants: () => (/* binding */ variants)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _modal_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modal-context */ \"(pages-dir-node)/./src/providers/modal-context.tsx\");\n/* __next_internal_client_entry_do_not_use__ variants,SchedulerProvider,useScheduler auto */ \n// SchedulerContext.tsx\n\n\n// Define the variant options\nconst variants = [\n    \"success\",\n    \"primary\",\n    \"default\",\n    \"warning\",\n    \"danger\"\n];\n// Initial state\nconst initialState = {\n    events: []\n};\n// Reducer function\nconst schedulerReducer = (state, action)=>{\n    switch(action.type){\n        case \"ADD_EVENT\":\n            // avoid duplicates by id\n            if (!action.payload || !action.payload.id) {\n                return state;\n            }\n            if (state.events.some((e)=>e.id === action.payload.id)) return state;\n            return {\n                ...state,\n                events: [\n                    ...state.events,\n                    action.payload\n                ]\n            };\n        case \"REMOVE_EVENT\":\n            return {\n                ...state,\n                events: state.events.filter((event)=>event.id !== action.payload.id)\n            };\n        case \"UPDATE_EVENT\":\n            return {\n                ...state,\n                events: state.events.map((event)=>event.id === action.payload.id ? action.payload : event)\n            };\n        case \"SET_EVENTS\":\n            // ensure payload is deduped by id\n            const list = Array.isArray(action.payload) ? action.payload : [];\n            const seen = new Set();\n            const deduped = list.filter((ev)=>{\n                if (!ev || !ev.id) return false;\n                if (seen.has(ev.id)) return false;\n                seen.add(ev.id);\n                return true;\n            });\n            return {\n                ...state,\n                events: deduped\n            };\n        default:\n            return state;\n    }\n};\n// Create the context with the correct type\nconst SchedulerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nconst SchedulerProvider = ({ children, onAddEvent, onUpdateEvent, onDeleteEvent, initialState, weekStartsOn = \"sunday\", recurrenceOptions })=>{\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(schedulerReducer, {\n        events: initialState ?? []\n    } // Sets initialState or an empty array as the default\n    );\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SchedulerProvider.useEffect\": ()=>{\n            if (initialState) {\n                dispatch({\n                    type: \"SET_EVENTS\",\n                    payload: initialState\n                });\n            }\n        }\n    }[\"SchedulerProvider.useEffect\"], [\n        initialState\n    ]);\n    // global getters\n    const getDaysInMonth = (month, year)=>{\n        return Array.from({\n            length: new Date(year, month + 1, 0).getDate()\n        }, (_, index)=>({\n                day: index + 1,\n                events: []\n            }));\n    };\n    const getDaysInWeek = (week, year)=>{\n        // Determine if the week should start on Sunday (0) or Monday (1)\n        const startDay = weekStartsOn === \"sunday\" ? 0 : 1;\n        // Get January 1st of the year\n        const janFirst = new Date(year, 0, 1);\n        // Calculate how many days we are offsetting from January 1st\n        const janFirstDayOfWeek = janFirst.getDay();\n        // Calculate the start of the week by finding the correct day in the year\n        const weekStart = new Date(janFirst);\n        weekStart.setDate(janFirst.getDate() + (week - 1) * 7 + (startDay - janFirstDayOfWeek + 7) % 7);\n        // Generate the week's days\n        const days = [];\n        for(let i = 0; i < 7; i++){\n            const day = new Date(weekStart);\n            day.setDate(day.getDate() + i);\n            days.push(day);\n        }\n        return days;\n    };\n    const getWeekNumber = (date)=>{\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n        d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n        const weekNo = Math.ceil(((d.getTime() - yearStart.getTime()) / 86400000 + 1) / 7);\n        return weekNo;\n    };\n    // Helper function to filter events for a specific day\n    const getEventsForDay = (day, currentDate)=>{\n        return state?.events.filter((event)=>{\n            const eventStart = new Date(event.startDate);\n            const eventEnd = new Date(event.endDate);\n            // Create new Date objects to avoid mutating `currentDate`\n            const startOfDay = new Date(currentDate);\n            startOfDay.setDate(day);\n            startOfDay.setHours(0, 0, 0, 0);\n            const endOfDay = new Date(currentDate);\n            endOfDay.setDate(day + 1);\n            endOfDay.setHours(0, 0, 0, 0);\n            // Check if the event starts or spans across the given day\n            const isSameDay = eventStart.getDate() === day && eventStart.getMonth() === currentDate.getMonth() && eventStart.getFullYear() === currentDate.getFullYear();\n            const isSpanningDay = eventStart < endOfDay && eventEnd >= startOfDay;\n            return isSameDay || isSpanningDay;\n        });\n    };\n    const getDayName = (day)=>{\n        const days = [\n            \"Sun\",\n            \"Mon\",\n            \"Tue\",\n            \"Wed\",\n            \"Thu\",\n            \"Fri\",\n            \"Sat\"\n        ];\n        return days[day];\n    };\n    const getters = {\n        getDaysInMonth,\n        getEventsForDay,\n        getDaysInWeek,\n        getWeekNumber,\n        getDayName\n    };\n    // handlers\n    function handleEventStyling(event, dayEvents, periodOptions) {\n        // Mina-inspired minutes-based layout\n        const toMillis = (d)=>d instanceof Date ? d.getTime() : new Date(d).getTime();\n        const ensureDate = (d)=>d instanceof Date ? d : new Date(d);\n        // Row height per hour - matches the hourly row height used in day/week views (64px)\n        const ROW_PX_PER_HOUR = 64;\n        // Build a list of items for the same day (or overlapping range)\n        const items = (dayEvents || []).filter((ev)=>ev && ev.startDate && ev.endDate).map((ev)=>{\n            const s = ensureDate(ev.startDate);\n            const e = ensureDate(ev.endDate);\n            const startMinutes = s.getHours() * 60 + s.getMinutes();\n            const endMinutes = e.getHours() * 60 + e.getMinutes();\n            const duration = Math.max(1, endMinutes - startMinutes);\n            return {\n                ev,\n                startMinutes,\n                endMinutes,\n                duration\n            };\n        }).sort((a, b)=>a.startMinutes - b.startMinutes || b.endMinutes - a.endMinutes);\n        // Simple column packing like Mina: place each event in the first column that doesn't overlap\n        const columns = [];\n        const columnsIndexMap = [];\n        items.forEach((it, idx)=>{\n            let placed = false;\n            for(let ci = 0; ci < columns.length; ci++){\n                const col = columns[ci];\n                const last = col[col.length - 1];\n                if (it.startMinutes >= last.endMinutes) {\n                    col.push(it);\n                    columnsIndexMap[idx] = ci;\n                    placed = true;\n                    break;\n                }\n            }\n            if (!placed) {\n                columnsIndexMap[idx] = columns.length;\n                columns.push([\n                    it\n                ]);\n            }\n        });\n        const totalCols = Math.max(1, columns.length);\n        // Find current event item\n        const thisStart = ensureDate(event.startDate);\n        const thisEnd = ensureDate(event.endDate);\n        const thisStartMin = thisStart.getHours() * 60 + thisStart.getMinutes();\n        const thisEndMin = thisEnd.getHours() * 60 + thisEnd.getMinutes();\n        const thisDuration = Math.max(1, thisEndMin - thisStartMin);\n        // Determine which column index this event occupies (fallback to 0)\n        let colIndex = 0;\n        for(let ci = 0; ci < columns.length; ci++){\n            if (columns[ci].some((it)=>it.ev.id === event.id)) {\n                colIndex = ci;\n                break;\n            }\n        }\n        const widthPercent = 100 / totalCols;\n        const leftPercent = colIndex * widthPercent;\n        // Compute pixels\n        const topPx = thisStartMin / 60 * ROW_PX_PER_HOUR;\n        const heightPx = Math.max(20, thisDuration / 60 * ROW_PX_PER_HOUR);\n        return {\n            height: `${heightPx}px`,\n            top: `${topPx}px`,\n            zIndex: colIndex + 1,\n            left: `${leftPercent}%`,\n            maxWidth: `${widthPercent}%`,\n            minWidth: `${widthPercent}%`\n        };\n    }\n    async function handleAddEvent(event) {\n        // If a parent handler is provided, call it and await its result. Only\n        // update local state after the parent returns a server-canonical event so\n        // the provider does not keep optimistic (possibly different) values that\n        // get overwritten on reload.\n        if (onAddEvent) {\n            try {\n                const res = await onAddEvent(event);\n                // If parent returned the saved canonical event, use it to update local state\n                if (res && res.id) {\n                    try {\n                        dispatch({\n                            type: \"ADD_EVENT\",\n                            payload: res\n                        });\n                    } catch (e) {}\n                    return res;\n                }\n                // Parent did not return a canonical saved event.\n                // Fall back to local optimistic add so the UI still reflects the new event.\n                try {\n                    dispatch({\n                        type: \"ADD_EVENT\",\n                        payload: event\n                    });\n                } catch (e) {}\n                return event;\n            } catch (e) {\n                // If the error is a client-side (4xx) response, rethrow so callers can show validation\n                // Otherwise (network error or 5xx) we can fallback to local optimistic add to keep UI responsive\n                try {\n                    const status = e && (e.status || e.statusCode || e.response && e.response.status);\n                    if (status && Number(status) >= 400 && Number(status) < 500) {\n                        console.warn('[SchedulerProvider] onAddEvent returned client error, aborting local fallback', status, e);\n                        throw e;\n                    }\n                } catch (inner) {}\n                console.warn('[SchedulerProvider] onAddEvent handler failed, falling back to local add', e);\n            }\n        }\n        dispatch({\n            type: \"ADD_EVENT\",\n            payload: event\n        });\n        return event;\n    }\n    async function handleUpdateEvent(event, id) {\n        // Prefer to let the parent persist the change and return the canonical\n        // event; only then update local state with the authoritative values.\n        if (onUpdateEvent) {\n            try {\n                const res = await onUpdateEvent({\n                    ...event,\n                    id\n                });\n                if (res && res.id) {\n                    try {\n                        dispatch({\n                            type: \"UPDATE_EVENT\",\n                            payload: res\n                        });\n                    } catch (e) {}\n                }\n                return res;\n            } catch (e) {\n                // If parent handler fails, fall back to optimistic local update so UI still reflects change\n                console.warn('[SchedulerProvider] onUpdateEvent handler failed, applying optimistic update', e);\n                try {\n                    dispatch({\n                        type: \"UPDATE_EVENT\",\n                        payload: {\n                            ...event,\n                            id\n                        }\n                    });\n                } catch (err) {}\n                // rethrow so callers can handle failure if needed\n                throw e;\n            }\n        }\n        // No parent handler: do a local optimistic update\n        try {\n            dispatch({\n                type: \"UPDATE_EVENT\",\n                payload: {\n                    ...event,\n                    id\n                }\n            });\n        } catch (e) {\n            console.warn('[SchedulerProvider] local dispatch update failed', e);\n        }\n        return {\n            ...event,\n            id\n        };\n    }\n    function handleDeleteEvent(id) {\n        if (onDeleteEvent) {\n            try {\n                const maybe = onDeleteEvent(id);\n                return maybe;\n            } catch (e) {\n            // fall back to local remove\n            }\n        }\n        dispatch({\n            type: \"REMOVE_EVENT\",\n            payload: {\n                id\n            }\n        });\n    }\n    // Local-only handlers: allow callers to update provider state without delegating\n    // persistence to parent page handlers. Useful when the caller performs the\n    // network request itself and only wants to update UI after confirmation.\n    function handleLocalAddEvent(event) {\n        try {\n            try {\n                // debug: log the incoming event for troubleshooting\n                console.debug('[SchedulerProvider] handleLocalAddEvent incoming:', event);\n            } catch (e) {}\n            dispatch({\n                type: \"ADD_EVENT\",\n                payload: event\n            });\n            try {\n                console.debug('[SchedulerProvider] events after add (count):', state && state.events && state.events.length ? state.events.length + 1 : 'unknown');\n            } catch (e) {}\n        } catch (e) {\n        // swallow - UI best-effort\n        }\n    }\n    function handleLocalUpdateEvent(event) {\n        try {\n            try {\n                console.debug('[SchedulerProvider] handleLocalUpdateEvent incoming:', event);\n            } catch (e) {}\n            if (!event || !event.id) return;\n            dispatch({\n                type: \"UPDATE_EVENT\",\n                payload: event\n            });\n            try {\n                console.debug('[SchedulerProvider] events after update (count):', state && state.events && state.events.length ? state.events.length : 'unknown');\n            } catch (e) {}\n        } catch (e) {\n        // swallow\n        }\n    }\n    const handlers = {\n        handleEventStyling,\n        handleAddEvent,\n        handleUpdateEvent,\n        handleDeleteEvent,\n        // local-only helpers\n        handleLocalAddEvent,\n        handleLocalUpdateEvent\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SchedulerContext.Provider, {\n        // include recurrenceOptions if passed via props (kept backward compatible)\n        value: {\n            events: state,\n            dispatch,\n            getters,\n            handlers,\n            weekStartsOn,\n            recurrenceOptions\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_modal_context__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n            children: children\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\university-planner\\\\src\\\\providers\\\\schedular-provider.tsx\",\n            lineNumber: 414,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\university-planner\\\\src\\\\providers\\\\schedular-provider.tsx\",\n        lineNumber: 410,\n        columnNumber: 5\n    }, undefined);\n};\n// Custom hook to use the scheduler context\nconst useScheduler = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SchedulerContext);\n    if (!context) {\n        throw new Error(\"useScheduler must be used within a SchedulerProvider\");\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/providers/schedular-provider.tsx\n");

/***/ })

};
;