"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_src_providers_schedular-provider_tsx",{

/***/ "(pages-dir-browser)/./src/providers/schedular-provider.tsx":
/*!**********************************************!*\
  !*** ./src/providers/schedular-provider.tsx ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchedulerProvider: () => (/* binding */ SchedulerProvider),\n/* harmony export */   useScheduler: () => (/* binding */ useScheduler),\n/* harmony export */   variants: () => (/* binding */ variants)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _modal_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modal-context */ \"(pages-dir-browser)/./src/providers/modal-context.tsx\");\n/* __next_internal_client_entry_do_not_use__ variants,SchedulerProvider,useScheduler auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n// SchedulerContext.tsx\n\n\n// Define the variant options\nconst variants = [\n    \"success\",\n    \"primary\",\n    \"default\",\n    \"warning\",\n    \"danger\"\n];\n// Initial state\nconst initialState = {\n    events: []\n};\n// Reducer function\nconst schedulerReducer = (state, action)=>{\n    switch(action.type){\n        case \"ADD_EVENT\":\n            // avoid duplicates by id\n            if (!action.payload || !action.payload.id) {\n                return state;\n            }\n            if (state.events.some((e)=>e.id === action.payload.id)) return state;\n            return {\n                ...state,\n                events: [\n                    ...state.events,\n                    action.payload\n                ]\n            };\n        case \"REMOVE_EVENT\":\n            return {\n                ...state,\n                events: state.events.filter((event)=>event.id !== action.payload.id)\n            };\n        case \"UPDATE_EVENT\":\n            return {\n                ...state,\n                events: state.events.map((event)=>event.id === action.payload.id ? action.payload : event)\n            };\n        case \"SET_EVENTS\":\n            // ensure payload is deduped by id\n            const list = Array.isArray(action.payload) ? action.payload : [];\n            const seen = new Set();\n            const deduped = list.filter((ev)=>{\n                if (!ev || !ev.id) return false;\n                if (seen.has(ev.id)) return false;\n                seen.add(ev.id);\n                return true;\n            });\n            return {\n                ...state,\n                events: deduped\n            };\n        default:\n            return state;\n    }\n};\n// Create the context with the correct type\nconst SchedulerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nconst SchedulerProvider = ({ children, onAddEvent, onUpdateEvent, onDeleteEvent, initialState, weekStartsOn = \"sunday\", recurrenceOptions })=>{\n    _s();\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(schedulerReducer, {\n        events: initialState ?? []\n    } // Sets initialState or an empty array as the default\n    );\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SchedulerProvider.useEffect\": ()=>{\n            if (initialState) {\n                dispatch({\n                    type: \"SET_EVENTS\",\n                    payload: initialState\n                });\n            }\n        }\n    }[\"SchedulerProvider.useEffect\"], [\n        initialState\n    ]);\n    // global getters\n    const getDaysInMonth = (month, year)=>{\n        return Array.from({\n            length: new Date(year, month + 1, 0).getDate()\n        }, (_, index)=>({\n                day: index + 1,\n                events: []\n            }));\n    };\n    const getDaysInWeek = (week, year)=>{\n        // Determine if the week should start on Sunday (0) or Monday (1)\n        const startDay = weekStartsOn === \"sunday\" ? 0 : 1;\n        // Get January 1st of the year\n        const janFirst = new Date(year, 0, 1);\n        // Calculate how many days we are offsetting from January 1st\n        const janFirstDayOfWeek = janFirst.getDay();\n        // Calculate the start of the week by finding the correct day in the year\n        const weekStart = new Date(janFirst);\n        weekStart.setDate(janFirst.getDate() + (week - 1) * 7 + (startDay - janFirstDayOfWeek + 7) % 7);\n        // Generate the week's days\n        const days = [];\n        for(let i = 0; i < 7; i++){\n            const day = new Date(weekStart);\n            day.setDate(day.getDate() + i);\n            days.push(day);\n        }\n        return days;\n    };\n    const getWeekNumber = (date)=>{\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n        d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n        const weekNo = Math.ceil(((d.getTime() - yearStart.getTime()) / 86400000 + 1) / 7);\n        return weekNo;\n    };\n    // Helper function to filter events for a specific day\n    const getEventsForDay = (day, currentDate)=>{\n        return state?.events.filter((event)=>{\n            const eventStart = new Date(event.startDate);\n            const eventEnd = new Date(event.endDate);\n            // Create new Date objects to avoid mutating `currentDate`\n            const startOfDay = new Date(currentDate);\n            startOfDay.setDate(day);\n            startOfDay.setHours(0, 0, 0, 0);\n            const endOfDay = new Date(currentDate);\n            endOfDay.setDate(day + 1);\n            endOfDay.setHours(0, 0, 0, 0);\n            // Check if the event starts or spans across the given day\n            const isSameDay = eventStart.getDate() === day && eventStart.getMonth() === currentDate.getMonth() && eventStart.getFullYear() === currentDate.getFullYear();\n            const isSpanningDay = eventStart < endOfDay && eventEnd >= startOfDay;\n            return isSameDay || isSpanningDay;\n        });\n    };\n    const getDayName = (day)=>{\n        const days = [\n            \"Sun\",\n            \"Mon\",\n            \"Tue\",\n            \"Wed\",\n            \"Thu\",\n            \"Fri\",\n            \"Sat\"\n        ];\n        return days[day];\n    };\n    const getters = {\n        getDaysInMonth,\n        getEventsForDay,\n        getDaysInWeek,\n        getWeekNumber,\n        getDayName\n    };\n    // handlers\n    function handleEventStyling(event, dayEvents, periodOptions) {\n        // Mina-inspired minutes-based layout\n        const toMillis = (d)=>d instanceof Date ? d.getTime() : new Date(d).getTime();\n        const ensureDate = (d)=>d instanceof Date ? d : new Date(d);\n        // Row height per hour - matches the hourly row height used in day/week views (64px)\n        const ROW_PX_PER_HOUR = 64;\n        // Build a list of items for the same day (or overlapping range)\n        const items = (dayEvents || []).filter((ev)=>ev && ev.startDate && ev.endDate).map((ev)=>{\n            const s = ensureDate(ev.startDate);\n            const e = ensureDate(ev.endDate);\n            const startMinutes = s.getHours() * 60 + s.getMinutes();\n            const endMinutes = e.getHours() * 60 + e.getMinutes();\n            const duration = Math.max(1, endMinutes - startMinutes);\n            return {\n                ev,\n                startMinutes,\n                endMinutes,\n                duration\n            };\n        }).sort((a, b)=>a.startMinutes - b.startMinutes || b.endMinutes - a.endMinutes);\n        // Simple column packing like Mina: place each event in the first column that doesn't overlap\n        const columns = [];\n        const columnsIndexMap = [];\n        items.forEach((it, idx)=>{\n            let placed = false;\n            for(let ci = 0; ci < columns.length; ci++){\n                const col = columns[ci];\n                const last = col[col.length - 1];\n                if (it.startMinutes >= last.endMinutes) {\n                    col.push(it);\n                    columnsIndexMap[idx] = ci;\n                    placed = true;\n                    break;\n                }\n            }\n            if (!placed) {\n                columnsIndexMap[idx] = columns.length;\n                columns.push([\n                    it\n                ]);\n            }\n        });\n        const totalCols = Math.max(1, columns.length);\n        // Find current event item\n        const thisStart = ensureDate(event.startDate);\n        const thisEnd = ensureDate(event.endDate);\n        const thisStartMin = thisStart.getHours() * 60 + thisStart.getMinutes();\n        const thisEndMin = thisEnd.getHours() * 60 + thisEnd.getMinutes();\n        const thisDuration = Math.max(1, thisEndMin - thisStartMin);\n        // Determine which column index this event occupies (fallback to 0)\n        let colIndex = 0;\n        for(let ci = 0; ci < columns.length; ci++){\n            if (columns[ci].some((it)=>it.ev.id === event.id)) {\n                colIndex = ci;\n                break;\n            }\n        }\n        const widthPercent = 100 / totalCols;\n        const leftPercent = colIndex * widthPercent;\n        // Compute pixels\n        const topPx = thisStartMin / 60 * ROW_PX_PER_HOUR;\n        const heightPx = Math.max(20, thisDuration / 60 * ROW_PX_PER_HOUR);\n        return {\n            height: `${heightPx}px`,\n            top: `${topPx}px`,\n            zIndex: colIndex + 1,\n            left: `${leftPercent}%`,\n            maxWidth: `${widthPercent}%`,\n            minWidth: `${widthPercent}%`\n        };\n    }\n    async function handleAddEvent(event) {\n        // If a parent handler is provided, call it and await its result. Only\n        // update local state after the parent returns a server-canonical event so\n        // the provider does not keep optimistic (possibly different) values that\n        // get overwritten on reload.\n        if (onAddEvent) {\n            try {\n                const res = await onAddEvent(event);\n                // If parent returned the saved canonical event, use it to update local state\n                if (res && res.id) {\n                    try {\n                        dispatch({\n                            type: \"ADD_EVENT\",\n                            payload: res\n                        });\n                    } catch (e) {}\n                }\n                return res;\n            } catch (e) {\n                // If the error is a client-side (4xx) response, rethrow so callers can show validation\n                // Otherwise (network error or 5xx) we can fallback to local optimistic add to keep UI responsive\n                try {\n                    const status = e && (e.status || e.statusCode || e.response && e.response.status);\n                    if (status && Number(status) >= 400 && Number(status) < 500) {\n                        console.warn('[SchedulerProvider] onAddEvent returned client error, aborting local fallback', status, e);\n                        throw e;\n                    }\n                } catch (inner) {}\n                console.warn('[SchedulerProvider] onAddEvent handler failed, falling back to local add', e);\n            }\n        }\n        dispatch({\n            type: \"ADD_EVENT\",\n            payload: event\n        });\n        return event;\n    }\n    async function handleUpdateEvent(event, id) {\n        // Prefer to let the parent persist the change and return the canonical\n        // event; only then update local state with the authoritative values.\n        if (onUpdateEvent) {\n            try {\n                const res = await onUpdateEvent({\n                    ...event,\n                    id\n                });\n                if (res && res.id) {\n                    try {\n                        dispatch({\n                            type: \"UPDATE_EVENT\",\n                            payload: res\n                        });\n                    } catch (e) {}\n                }\n                return res;\n            } catch (e) {\n                // If parent handler fails, fall back to optimistic local update so UI still reflects change\n                console.warn('[SchedulerProvider] onUpdateEvent handler failed, applying optimistic update', e);\n                try {\n                    dispatch({\n                        type: \"UPDATE_EVENT\",\n                        payload: {\n                            ...event,\n                            id\n                        }\n                    });\n                } catch (err) {}\n                // rethrow so callers can handle failure if needed\n                throw e;\n            }\n        }\n        // No parent handler: do a local optimistic update\n        try {\n            dispatch({\n                type: \"UPDATE_EVENT\",\n                payload: {\n                    ...event,\n                    id\n                }\n            });\n        } catch (e) {\n            console.warn('[SchedulerProvider] local dispatch update failed', e);\n        }\n        return {\n            ...event,\n            id\n        };\n    }\n    function handleDeleteEvent(id) {\n        if (onDeleteEvent) {\n            try {\n                const maybe = onDeleteEvent(id);\n                return maybe;\n            } catch (e) {\n            // fall back to local remove\n            }\n        }\n        dispatch({\n            type: \"REMOVE_EVENT\",\n            payload: {\n                id\n            }\n        });\n    }\n    // Local-only handlers: allow callers to update provider state without delegating\n    // persistence to parent page handlers. Useful when the caller performs the\n    // network request itself and only wants to update UI after confirmation.\n    function handleLocalAddEvent(event) {\n        try {\n            try {\n                // debug: log the incoming event for troubleshooting\n                console.debug('[SchedulerProvider] handleLocalAddEvent incoming:', event);\n            } catch (e) {}\n            dispatch({\n                type: \"ADD_EVENT\",\n                payload: event\n            });\n            try {\n                console.debug('[SchedulerProvider] events after add (count):', state && state.events && state.events.length ? state.events.length + 1 : 'unknown');\n            } catch (e) {}\n        } catch (e) {\n        // swallow - UI best-effort\n        }\n    }\n    function handleLocalUpdateEvent(event) {\n        try {\n            try {\n                console.debug('[SchedulerProvider] handleLocalUpdateEvent incoming:', event);\n            } catch (e) {}\n            if (!event || !event.id) return;\n            dispatch({\n                type: \"UPDATE_EVENT\",\n                payload: event\n            });\n            try {\n                console.debug('[SchedulerProvider] events after update (count):', state && state.events && state.events.length ? state.events.length : 'unknown');\n            } catch (e) {}\n        } catch (e) {\n        // swallow\n        }\n    }\n    const handlers = {\n        handleEventStyling,\n        handleAddEvent,\n        handleUpdateEvent,\n        handleDeleteEvent,\n        // local-only helpers\n        handleLocalAddEvent,\n        handleLocalUpdateEvent\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SchedulerContext.Provider, {\n        // include recurrenceOptions if passed via props (kept backward compatible)\n        value: {\n            events: state,\n            dispatch,\n            getters,\n            handlers,\n            weekStartsOn,\n            recurrenceOptions\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_modal_context__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n            children: children\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\university-planner\\\\src\\\\providers\\\\schedular-provider.tsx\",\n            lineNumber: 410,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\university-planner\\\\src\\\\providers\\\\schedular-provider.tsx\",\n        lineNumber: 406,\n        columnNumber: 5\n    }, undefined);\n};\n_s(SchedulerProvider, \"+GWmRPgPwRqyHMb75g9kmdyxOrA=\");\n_c = SchedulerProvider;\n// Custom hook to use the scheduler context\nconst useScheduler = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SchedulerContext);\n    if (!context) {\n        throw new Error(\"useScheduler must be used within a SchedulerProvider\");\n    }\n    return context;\n};\n_s1(useScheduler, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SchedulerProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/providers/schedular-provider.tsx\n"));

/***/ })

});